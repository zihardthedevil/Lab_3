
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  00004064  2**0
                  CONTENTS
  4 .ARM          00000000  08002e48  08002e48  00004064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e48  08002e48  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002e50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000064  08002eb4  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08002eb4  00004450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089e7  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d37  00000000  00000000  0000ca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0000e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080c  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016de1  00000000  00000000  0000fa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c90d  00000000  00000000  00026845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826d0  00000000  00000000  00033152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000299c  00000000  00000000  000b5868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b8204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e0c 	.word	0x08002e0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002e0c 	.word	0x08002e0c

0800014c <subKeyProcess>:
int KeyReg1_3 = NORMAL_STATE;
int KeyReg2_3 = NORMAL_STATE;
int KeyReg3_3 = NORMAL_STATE;
int TimerForKeyPress3 = 200;

void subKeyProcess(int buttonNumber) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    switch(buttonNumber) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d011      	beq.n	800017e <subKeyProcess+0x32>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b03      	cmp	r3, #3
 800015e:	dc12      	bgt.n	8000186 <subKeyProcess+0x3a>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b01      	cmp	r3, #1
 8000164:	d003      	beq.n	800016e <subKeyProcess+0x22>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b02      	cmp	r3, #2
 800016a:	d004      	beq.n	8000176 <subKeyProcess+0x2a>
            break;
        case 3:
            BUT3_flag = 1;
            break;
    }
}
 800016c:	e00b      	b.n	8000186 <subKeyProcess+0x3a>
            BUT1_flag = 1;
 800016e:	4b08      	ldr	r3, [pc, #32]	@ (8000190 <subKeyProcess+0x44>)
 8000170:	2201      	movs	r2, #1
 8000172:	601a      	str	r2, [r3, #0]
            break;
 8000174:	e007      	b.n	8000186 <subKeyProcess+0x3a>
            BUT2_flag = 1;
 8000176:	4b07      	ldr	r3, [pc, #28]	@ (8000194 <subKeyProcess+0x48>)
 8000178:	2201      	movs	r2, #1
 800017a:	601a      	str	r2, [r3, #0]
            break;
 800017c:	e003      	b.n	8000186 <subKeyProcess+0x3a>
            BUT3_flag = 1;
 800017e:	4b06      	ldr	r3, [pc, #24]	@ (8000198 <subKeyProcess+0x4c>)
 8000180:	2201      	movs	r2, #1
 8000182:	601a      	str	r2, [r3, #0]
            break;
 8000184:	bf00      	nop
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000080 	.word	0x20000080
 8000194:	20000084 	.word	0x20000084
 8000198:	20000088 	.word	0x20000088

0800019c <isButton1Pressed>:

int isButton1Pressed() {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
    if(BUT1_flag == 1) {
 80001a0:	4b06      	ldr	r3, [pc, #24]	@ (80001bc <isButton1Pressed+0x20>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d104      	bne.n	80001b2 <isButton1Pressed+0x16>
        BUT1_flag = 0;
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <isButton1Pressed+0x20>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
        return 1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	e000      	b.n	80001b4 <isButton1Pressed+0x18>
    }
    return 0;
 80001b2:	2300      	movs	r3, #0
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	20000080 	.word	0x20000080

080001c0 <isButton2Pressed>:

int isButton2Pressed() {
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
    if(BUT2_flag == 1) {
 80001c4:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <isButton2Pressed+0x20>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d104      	bne.n	80001d6 <isButton2Pressed+0x16>
        BUT2_flag = 0;
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <isButton2Pressed+0x20>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
        return 1;
 80001d2:	2301      	movs	r3, #1
 80001d4:	e000      	b.n	80001d8 <isButton2Pressed+0x18>
    }
    return 0;
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	20000084 	.word	0x20000084

080001e4 <isButton3Pressed>:

int isButton3Pressed() {
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    if(BUT3_flag == 1) {
 80001e8:	4b06      	ldr	r3, [pc, #24]	@ (8000204 <isButton3Pressed+0x20>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d104      	bne.n	80001fa <isButton3Pressed+0x16>
        BUT3_flag = 0;
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <isButton3Pressed+0x20>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
        return 1;
 80001f6:	2301      	movs	r3, #1
 80001f8:	e000      	b.n	80001fc <isButton3Pressed+0x18>
    }
    return 0;
 80001fa:	2300      	movs	r3, #0
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000088 	.word	0x20000088

08000208 <getKeyInput1>:

void getKeyInput1() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
    KeyReg0_1 = KeyReg1_1;
 800020c:	4b23      	ldr	r3, [pc, #140]	@ (800029c <getKeyInput1+0x94>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a23      	ldr	r2, [pc, #140]	@ (80002a0 <getKeyInput1+0x98>)
 8000212:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg2_1;
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <getKeyInput1+0x9c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a20      	ldr	r2, [pc, #128]	@ (800029c <getKeyInput1+0x94>)
 800021a:	6013      	str	r3, [r2, #0]
    KeyReg2_1 = HAL_GPIO_ReadPin(GPIOA, BUT1_Pin);
 800021c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000220:	4821      	ldr	r0, [pc, #132]	@ (80002a8 <getKeyInput1+0xa0>)
 8000222:	f001 fdc5 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	461a      	mov	r2, r3
 800022a:	4b1e      	ldr	r3, [pc, #120]	@ (80002a4 <getKeyInput1+0x9c>)
 800022c:	601a      	str	r2, [r3, #0]

    if ((KeyReg0_1 == KeyReg1_1) && (KeyReg1_1 == KeyReg2_1)) {
 800022e:	4b1c      	ldr	r3, [pc, #112]	@ (80002a0 <getKeyInput1+0x98>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b1a      	ldr	r3, [pc, #104]	@ (800029c <getKeyInput1+0x94>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	429a      	cmp	r2, r3
 8000238:	d12d      	bne.n	8000296 <getKeyInput1+0x8e>
 800023a:	4b18      	ldr	r3, [pc, #96]	@ (800029c <getKeyInput1+0x94>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b19      	ldr	r3, [pc, #100]	@ (80002a4 <getKeyInput1+0x9c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d127      	bne.n	8000296 <getKeyInput1+0x8e>
        if (KeyReg3_1 != KeyReg2_1) {
 8000246:	4b19      	ldr	r3, [pc, #100]	@ (80002ac <getKeyInput1+0xa4>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b16      	ldr	r3, [pc, #88]	@ (80002a4 <getKeyInput1+0x9c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d00e      	beq.n	8000270 <getKeyInput1+0x68>
            KeyReg3_1 = KeyReg2_1;
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <getKeyInput1+0x9c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a15      	ldr	r2, [pc, #84]	@ (80002ac <getKeyInput1+0xa4>)
 8000258:	6013      	str	r3, [r2, #0]
            if (KeyReg2_1 == PRESSED_STATE) {
 800025a:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <getKeyInput1+0x9c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d119      	bne.n	8000296 <getKeyInput1+0x8e>
                subKeyProcess(1);
 8000262:	2001      	movs	r0, #1
 8000264:	f7ff ff72 	bl	800014c <subKeyProcess>
                TimerForKeyPress1 = 200;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <getKeyInput1+0xa8>)
 800026a:	22c8      	movs	r2, #200	@ 0xc8
 800026c:	601a      	str	r2, [r3, #0]
                }
                TimerForKeyPress1 = 200;
            }
        }
    }
}
 800026e:	e012      	b.n	8000296 <getKeyInput1+0x8e>
            TimerForKeyPress1--;
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <getKeyInput1+0xa8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <getKeyInput1+0xa8>)
 8000278:	6013      	str	r3, [r2, #0]
            if (TimerForKeyPress1 == 0) {
 800027a:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <getKeyInput1+0xa8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d109      	bne.n	8000296 <getKeyInput1+0x8e>
                if (KeyReg2_1 == PRESSED_STATE) {
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <getKeyInput1+0x9c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <getKeyInput1+0x88>
                    subKeyProcess(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f7ff ff5e 	bl	800014c <subKeyProcess>
                TimerForKeyPress1 = 200;
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <getKeyInput1+0xa8>)
 8000292:	22c8      	movs	r2, #200	@ 0xc8
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	20000000 	.word	0x20000000
 80002a4:	20000008 	.word	0x20000008
 80002a8:	40010800 	.word	0x40010800
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000010 	.word	0x20000010

080002b4 <getKeyInput2>:

void getKeyInput2() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    KeyReg0_2 = KeyReg1_2;
 80002b8:	4b23      	ldr	r3, [pc, #140]	@ (8000348 <getKeyInput2+0x94>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a23      	ldr	r2, [pc, #140]	@ (800034c <getKeyInput2+0x98>)
 80002be:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg2_2;
 80002c0:	4b23      	ldr	r3, [pc, #140]	@ (8000350 <getKeyInput2+0x9c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <getKeyInput2+0x94>)
 80002c6:	6013      	str	r3, [r2, #0]
    KeyReg2_2 = HAL_GPIO_ReadPin(GPIOA, BUT2_Pin);
 80002c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <getKeyInput2+0xa0>)
 80002ce:	f001 fd6f 	bl	8001db0 <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <getKeyInput2+0x9c>)
 80002d8:	601a      	str	r2, [r3, #0]

    if ((KeyReg0_2 == KeyReg1_2) && (KeyReg1_2 == KeyReg2_2)) {
 80002da:	4b1c      	ldr	r3, [pc, #112]	@ (800034c <getKeyInput2+0x98>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b1a      	ldr	r3, [pc, #104]	@ (8000348 <getKeyInput2+0x94>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d12d      	bne.n	8000342 <getKeyInput2+0x8e>
 80002e6:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <getKeyInput2+0x94>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b19      	ldr	r3, [pc, #100]	@ (8000350 <getKeyInput2+0x9c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d127      	bne.n	8000342 <getKeyInput2+0x8e>
        if (KeyReg3_2 != KeyReg2_2) {
 80002f2:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <getKeyInput2+0xa4>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <getKeyInput2+0x9c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d00e      	beq.n	800031c <getKeyInput2+0x68>
            KeyReg3_2 = KeyReg2_2;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <getKeyInput2+0x9c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <getKeyInput2+0xa4>)
 8000304:	6013      	str	r3, [r2, #0]
            if (KeyReg2_2 == PRESSED_STATE) {
 8000306:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <getKeyInput2+0x9c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d119      	bne.n	8000342 <getKeyInput2+0x8e>
                subKeyProcess(2);
 800030e:	2002      	movs	r0, #2
 8000310:	f7ff ff1c 	bl	800014c <subKeyProcess>
                TimerForKeyPress2 = 200;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <getKeyInput2+0xa8>)
 8000316:	22c8      	movs	r2, #200	@ 0xc8
 8000318:	601a      	str	r2, [r3, #0]
                }
                TimerForKeyPress2 = 200;
            }
        }
    }
}
 800031a:	e012      	b.n	8000342 <getKeyInput2+0x8e>
            TimerForKeyPress2--;
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <getKeyInput2+0xa8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3b01      	subs	r3, #1
 8000322:	4a0e      	ldr	r2, [pc, #56]	@ (800035c <getKeyInput2+0xa8>)
 8000324:	6013      	str	r3, [r2, #0]
            if (TimerForKeyPress2 == 0) {
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <getKeyInput2+0xa8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d109      	bne.n	8000342 <getKeyInput2+0x8e>
                if (KeyReg2_2 == PRESSED_STATE) {
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <getKeyInput2+0x9c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d102      	bne.n	800033c <getKeyInput2+0x88>
                    subKeyProcess(2);
 8000336:	2002      	movs	r0, #2
 8000338:	f7ff ff08 	bl	800014c <subKeyProcess>
                TimerForKeyPress2 = 200;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <getKeyInput2+0xa8>)
 800033e:	22c8      	movs	r2, #200	@ 0xc8
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000018 	.word	0x20000018
 800034c:	20000014 	.word	0x20000014
 8000350:	2000001c 	.word	0x2000001c
 8000354:	40010800 	.word	0x40010800
 8000358:	20000020 	.word	0x20000020
 800035c:	20000024 	.word	0x20000024

08000360 <getKeyInput3>:

void getKeyInput3() {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
    KeyReg0_3 = KeyReg1_3;
 8000364:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <getKeyInput3+0x94>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a23      	ldr	r2, [pc, #140]	@ (80003f8 <getKeyInput3+0x98>)
 800036a:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg2_3;
 800036c:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <getKeyInput3+0x9c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a20      	ldr	r2, [pc, #128]	@ (80003f4 <getKeyInput3+0x94>)
 8000372:	6013      	str	r3, [r2, #0]
    KeyReg2_3 = HAL_GPIO_ReadPin(GPIOA, BUT3_Pin);
 8000374:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000378:	4821      	ldr	r0, [pc, #132]	@ (8000400 <getKeyInput3+0xa0>)
 800037a:	f001 fd19 	bl	8001db0 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <getKeyInput3+0x9c>)
 8000384:	601a      	str	r2, [r3, #0]

    if ((KeyReg0_3 == KeyReg1_3) && (KeyReg1_3 == KeyReg2_3)) {
 8000386:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <getKeyInput3+0x98>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <getKeyInput3+0x94>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	429a      	cmp	r2, r3
 8000390:	d12d      	bne.n	80003ee <getKeyInput3+0x8e>
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <getKeyInput3+0x94>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <getKeyInput3+0x9c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d127      	bne.n	80003ee <getKeyInput3+0x8e>
        if (KeyReg3_3 != KeyReg2_3) {
 800039e:	4b19      	ldr	r3, [pc, #100]	@ (8000404 <getKeyInput3+0xa4>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <getKeyInput3+0x9c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d00e      	beq.n	80003c8 <getKeyInput3+0x68>
            KeyReg3_3 = KeyReg2_3;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <getKeyInput3+0x9c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a15      	ldr	r2, [pc, #84]	@ (8000404 <getKeyInput3+0xa4>)
 80003b0:	6013      	str	r3, [r2, #0]
            if (KeyReg2_3 == PRESSED_STATE) {
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <getKeyInput3+0x9c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d119      	bne.n	80003ee <getKeyInput3+0x8e>
                subKeyProcess(3);
 80003ba:	2003      	movs	r0, #3
 80003bc:	f7ff fec6 	bl	800014c <subKeyProcess>
                TimerForKeyPress3 = 200;
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <getKeyInput3+0xa8>)
 80003c2:	22c8      	movs	r2, #200	@ 0xc8
 80003c4:	601a      	str	r2, [r3, #0]
                }
                TimerForKeyPress3 = 200;
            }
        }
    }
}
 80003c6:	e012      	b.n	80003ee <getKeyInput3+0x8e>
            TimerForKeyPress3--;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <getKeyInput3+0xa8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <getKeyInput3+0xa8>)
 80003d0:	6013      	str	r3, [r2, #0]
            if (TimerForKeyPress3 == 0) {
 80003d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000408 <getKeyInput3+0xa8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <getKeyInput3+0x8e>
                if (KeyReg2_3 == PRESSED_STATE) {
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <getKeyInput3+0x9c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d102      	bne.n	80003e8 <getKeyInput3+0x88>
                    subKeyProcess(3);
 80003e2:	2003      	movs	r0, #3
 80003e4:	f7ff feb2 	bl	800014c <subKeyProcess>
                TimerForKeyPress3 = 200;
 80003e8:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <getKeyInput3+0xa8>)
 80003ea:	22c8      	movs	r2, #200	@ 0xc8
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000002c 	.word	0x2000002c
 80003f8:	20000028 	.word	0x20000028
 80003fc:	20000030 	.word	0x20000030
 8000400:	40010800 	.word	0x40010800
 8000404:	20000034 	.word	0x20000034
 8000408:	20000038 	.word	0x20000038

0800040c <getKeyInput>:

void getKeyInput() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    getKeyInput1();
 8000410:	f7ff fefa 	bl	8000208 <getKeyInput1>
    getKeyInput2();
 8000414:	f7ff ff4e 	bl	80002b4 <getKeyInput2>
    getKeyInput3();
 8000418:	f7ff ffa2 	bl	8000360 <getKeyInput3>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <fsm_automatic_run>:
int Yellow_Time_Y = 0;
int Yellow_Time_X = 0;



void fsm_automatic_run() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    switch (status) {
 8000424:	4b8b      	ldr	r3, [pc, #556]	@ (8000654 <fsm_automatic_run+0x234>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	2b04      	cmp	r3, #4
 800042c:	f200 817d 	bhi.w	800072a <fsm_automatic_run+0x30a>
 8000430:	a201      	add	r2, pc, #4	@ (adr r2, 8000438 <fsm_automatic_run+0x18>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	0800044d 	.word	0x0800044d
 800043c:	0800047f 	.word	0x0800047f
 8000440:	08000539 	.word	0x08000539
 8000444:	080005cb 	.word	0x080005cb
 8000448:	0800068d 	.word	0x0800068d
        case INIT:
            setTimer1(LedGreenTime * 1000);
 800044c:	4b82      	ldr	r3, [pc, #520]	@ (8000658 <fsm_automatic_run+0x238>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fd89 	bl	8000f70 <setTimer1>
            setTimer2(1000);
 800045e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000462:	f000 fda1 	bl	8000fa8 <setTimer2>
            status = AUTO_GREEN_Y;
 8000466:	4b7b      	ldr	r3, [pc, #492]	@ (8000654 <fsm_automatic_run+0x234>)
 8000468:	2202      	movs	r2, #2
 800046a:	601a      	str	r2, [r3, #0]
            Green_Time_Y = LedGreenTime;
 800046c:	4b7a      	ldr	r3, [pc, #488]	@ (8000658 <fsm_automatic_run+0x238>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a7a      	ldr	r2, [pc, #488]	@ (800065c <fsm_automatic_run+0x23c>)
 8000472:	6013      	str	r3, [r2, #0]
            Red_Time_X = LedRedTime;
 8000474:	4b7a      	ldr	r3, [pc, #488]	@ (8000660 <fsm_automatic_run+0x240>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a7a      	ldr	r2, [pc, #488]	@ (8000664 <fsm_automatic_run+0x244>)
 800047a:	6013      	str	r3, [r2, #0]
            break;
 800047c:	e155      	b.n	800072a <fsm_automatic_run+0x30a>
        case AUTO_GREEN_Y:
        	HAL_GPIO_WritePin(GPIOA, LRY_Pin|LYY_Pin|LYX_Pin|LGX_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8000484:	4878      	ldr	r0, [pc, #480]	@ (8000668 <fsm_automatic_run+0x248>)
 8000486:	f001 fcaa 	bl	8001dde <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, LGY_Pin|LRX_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2160      	movs	r1, #96	@ 0x60
 800048e:	4876      	ldr	r0, [pc, #472]	@ (8000668 <fsm_automatic_run+0x248>)
 8000490:	f001 fca5 	bl	8001dde <HAL_GPIO_WritePin>
        	updateRealTime(Green_Time_Y,Red_Time_X);
 8000494:	4b71      	ldr	r3, [pc, #452]	@ (800065c <fsm_automatic_run+0x23c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a72      	ldr	r2, [pc, #456]	@ (8000664 <fsm_automatic_run+0x244>)
 800049a:	6812      	ldr	r2, [r2, #0]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 f87e 	bl	80015a0 <updateRealTime>
            if (timer2_flag == 1) {
 80004a4:	4b71      	ldr	r3, [pc, #452]	@ (800066c <fsm_automatic_run+0x24c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d115      	bne.n	80004d8 <fsm_automatic_run+0xb8>
                setTimer2(1000);
 80004ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004b0:	f000 fd7a 	bl	8000fa8 <setTimer2>
                updateRealTime(Green_Time_Y,Red_Time_X);
 80004b4:	4b69      	ldr	r3, [pc, #420]	@ (800065c <fsm_automatic_run+0x23c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a6a      	ldr	r2, [pc, #424]	@ (8000664 <fsm_automatic_run+0x244>)
 80004ba:	6812      	ldr	r2, [r2, #0]
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 f86e 	bl	80015a0 <updateRealTime>
                Green_Time_Y--;
 80004c4:	4b65      	ldr	r3, [pc, #404]	@ (800065c <fsm_automatic_run+0x23c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	4a64      	ldr	r2, [pc, #400]	@ (800065c <fsm_automatic_run+0x23c>)
 80004cc:	6013      	str	r3, [r2, #0]
                Red_Time_X--;
 80004ce:	4b65      	ldr	r3, [pc, #404]	@ (8000664 <fsm_automatic_run+0x244>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	4a63      	ldr	r2, [pc, #396]	@ (8000664 <fsm_automatic_run+0x244>)
 80004d6:	6013      	str	r3, [r2, #0]
            }
            led7_run();
 80004d8:	f001 f942 	bl	8001760 <led7_run>
            if (timer1_flag == 1) {
 80004dc:	4b64      	ldr	r3, [pc, #400]	@ (8000670 <fsm_automatic_run+0x250>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10f      	bne.n	8000504 <fsm_automatic_run+0xe4>
            	setTimer1(LedYellowTime * 1000);
 80004e4:	4b63      	ldr	r3, [pc, #396]	@ (8000674 <fsm_automatic_run+0x254>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004ec:	fb02 f303 	mul.w	r3, r2, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fd3d 	bl	8000f70 <setTimer1>
                status = AUTO_YELLOW_Y;
 80004f6:	4b57      	ldr	r3, [pc, #348]	@ (8000654 <fsm_automatic_run+0x234>)
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
                Yellow_Time_Y = LedYellowTime;
 80004fc:	4b5d      	ldr	r3, [pc, #372]	@ (8000674 <fsm_automatic_run+0x254>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a5d      	ldr	r2, [pc, #372]	@ (8000678 <fsm_automatic_run+0x258>)
 8000502:	6013      	str	r3, [r2, #0]
            }
            if (isButton1Pressed() == 1) {
 8000504:	f7ff fe4a 	bl	800019c <isButton1Pressed>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	f040 8106 	bne.w	800071c <fsm_automatic_run+0x2fc>
            	status = MAN_RED;
 8000510:	4b50      	ldr	r3, [pc, #320]	@ (8000654 <fsm_automatic_run+0x234>)
 8000512:	220c      	movs	r2, #12
 8000514:	601a      	str	r2, [r3, #0]
            	SetRedTime = LedRedTime;
 8000516:	4b52      	ldr	r3, [pc, #328]	@ (8000660 <fsm_automatic_run+0x240>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a58      	ldr	r2, [pc, #352]	@ (800067c <fsm_automatic_run+0x25c>)
 800051c:	6013      	str	r3, [r2, #0]
            	setTimer1(10000);
 800051e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000522:	f000 fd25 	bl	8000f70 <setTimer1>
            	setTimer4(250);
 8000526:	20fa      	movs	r0, #250	@ 0xfa
 8000528:	f000 fd76 	bl	8001018 <setTimer4>
            	HAL_GPIO_WritePin(GPIOA, LRY_Pin|LRX_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2148      	movs	r1, #72	@ 0x48
 8000530:	484d      	ldr	r0, [pc, #308]	@ (8000668 <fsm_automatic_run+0x248>)
 8000532:	f001 fc54 	bl	8001dde <HAL_GPIO_WritePin>
            }
            break;
 8000536:	e0f1      	b.n	800071c <fsm_automatic_run+0x2fc>
        case AUTO_YELLOW_Y:
        	HAL_GPIO_WritePin(GPIOA, LRY_Pin|LGY_Pin|LYX_Pin|LGX_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800053e:	484a      	ldr	r0, [pc, #296]	@ (8000668 <fsm_automatic_run+0x248>)
 8000540:	f001 fc4d 	bl	8001dde <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, LYY_Pin|LRX_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2150      	movs	r1, #80	@ 0x50
 8000548:	4847      	ldr	r0, [pc, #284]	@ (8000668 <fsm_automatic_run+0x248>)
 800054a:	f001 fc48 	bl	8001dde <HAL_GPIO_WritePin>
            updateRealTime(Yellow_Time_Y, Red_Time_X);
 800054e:	4b4a      	ldr	r3, [pc, #296]	@ (8000678 <fsm_automatic_run+0x258>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a44      	ldr	r2, [pc, #272]	@ (8000664 <fsm_automatic_run+0x244>)
 8000554:	6812      	ldr	r2, [r2, #0]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f821 	bl	80015a0 <updateRealTime>
            if (timer2_flag == 1) {
 800055e:	4b43      	ldr	r3, [pc, #268]	@ (800066c <fsm_automatic_run+0x24c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d115      	bne.n	8000592 <fsm_automatic_run+0x172>
                setTimer2(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056a:	f000 fd1d 	bl	8000fa8 <setTimer2>
                updateRealTime(Yellow_Time_Y, Red_Time_X);
 800056e:	4b42      	ldr	r3, [pc, #264]	@ (8000678 <fsm_automatic_run+0x258>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a3c      	ldr	r2, [pc, #240]	@ (8000664 <fsm_automatic_run+0x244>)
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	4611      	mov	r1, r2
 8000578:	4618      	mov	r0, r3
 800057a:	f001 f811 	bl	80015a0 <updateRealTime>
                Yellow_Time_Y--;
 800057e:	4b3e      	ldr	r3, [pc, #248]	@ (8000678 <fsm_automatic_run+0x258>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3b01      	subs	r3, #1
 8000584:	4a3c      	ldr	r2, [pc, #240]	@ (8000678 <fsm_automatic_run+0x258>)
 8000586:	6013      	str	r3, [r2, #0]
                Red_Time_X--;
 8000588:	4b36      	ldr	r3, [pc, #216]	@ (8000664 <fsm_automatic_run+0x244>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a35      	ldr	r2, [pc, #212]	@ (8000664 <fsm_automatic_run+0x244>)
 8000590:	6013      	str	r3, [r2, #0]
            }
            led7_run();
 8000592:	f001 f8e5 	bl	8001760 <led7_run>
            if (timer1_flag == 1) {
 8000596:	4b36      	ldr	r3, [pc, #216]	@ (8000670 <fsm_automatic_run+0x250>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	f040 80c0 	bne.w	8000720 <fsm_automatic_run+0x300>
                setTimer1(LedGreenTime * 1000);
 80005a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <fsm_automatic_run+0x238>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fcdf 	bl	8000f70 <setTimer1>
                Green_Time_X = LedGreenTime;
 80005b2:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <fsm_automatic_run+0x238>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a32      	ldr	r2, [pc, #200]	@ (8000680 <fsm_automatic_run+0x260>)
 80005b8:	6013      	str	r3, [r2, #0]
                Red_Time_Y = LedRedTime;
 80005ba:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <fsm_automatic_run+0x240>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a31      	ldr	r2, [pc, #196]	@ (8000684 <fsm_automatic_run+0x264>)
 80005c0:	6013      	str	r3, [r2, #0]
                status = AUTO_GREEN_X;
 80005c2:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <fsm_automatic_run+0x234>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	601a      	str	r2, [r3, #0]
            }
            break;
 80005c8:	e0aa      	b.n	8000720 <fsm_automatic_run+0x300>

        case AUTO_GREEN_X:
        	HAL_GPIO_WritePin(GPIOA, LRY_Pin|LGX_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80005d0:	4825      	ldr	r0, [pc, #148]	@ (8000668 <fsm_automatic_run+0x248>)
 80005d2:	f001 fc04 	bl	8001dde <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, LYY_Pin|LGY_Pin|LRX_Pin|LYX_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	21f0      	movs	r1, #240	@ 0xf0
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <fsm_automatic_run+0x248>)
 80005dc:	f001 fbff 	bl	8001dde <HAL_GPIO_WritePin>
            updateRealTime(Red_Time_Y,Green_Time_X);
 80005e0:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <fsm_automatic_run+0x264>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <fsm_automatic_run+0x260>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ffd8 	bl	80015a0 <updateRealTime>
            if (timer2_flag == 1) {
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <fsm_automatic_run+0x24c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d115      	bne.n	8000624 <fsm_automatic_run+0x204>
                setTimer2(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fc:	f000 fcd4 	bl	8000fa8 <setTimer2>
                updateRealTime(Red_Time_Y,Green_Time_X);
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <fsm_automatic_run+0x264>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1e      	ldr	r2, [pc, #120]	@ (8000680 <fsm_automatic_run+0x260>)
 8000606:	6812      	ldr	r2, [r2, #0]
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f000 ffc8 	bl	80015a0 <updateRealTime>
                Green_Time_X--;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <fsm_automatic_run+0x260>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	4a1a      	ldr	r2, [pc, #104]	@ (8000680 <fsm_automatic_run+0x260>)
 8000618:	6013      	str	r3, [r2, #0]
                Red_Time_Y--;
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <fsm_automatic_run+0x264>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <fsm_automatic_run+0x264>)
 8000622:	6013      	str	r3, [r2, #0]
            }
            led7_run();
 8000624:	f001 f89c 	bl	8001760 <led7_run>
            if (timer1_flag == 1) {
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <fsm_automatic_run+0x250>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d179      	bne.n	8000724 <fsm_automatic_run+0x304>
                setTimer1(LedYellowTime * 1000);
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <fsm_automatic_run+0x254>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fc97 	bl	8000f70 <setTimer1>
                Yellow_Time_X = LedYellowTime;
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <fsm_automatic_run+0x254>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a10      	ldr	r2, [pc, #64]	@ (8000688 <fsm_automatic_run+0x268>)
 8000648:	6013      	str	r3, [r2, #0]
                status = AUTO_YELLOW_X;
 800064a:	4b02      	ldr	r3, [pc, #8]	@ (8000654 <fsm_automatic_run+0x234>)
 800064c:	2205      	movs	r2, #5
 800064e:	601a      	str	r2, [r3, #0]
            }
            break;
 8000650:	e068      	b.n	8000724 <fsm_automatic_run+0x304>
 8000652:	bf00      	nop
 8000654:	200000b0 	.word	0x200000b0
 8000658:	20000044 	.word	0x20000044
 800065c:	20000094 	.word	0x20000094
 8000660:	2000003c 	.word	0x2000003c
 8000664:	20000090 	.word	0x20000090
 8000668:	40010800 	.word	0x40010800
 800066c:	20000430 	.word	0x20000430
 8000670:	20000428 	.word	0x20000428
 8000674:	20000040 	.word	0x20000040
 8000678:	2000009c 	.word	0x2000009c
 800067c:	200000a4 	.word	0x200000a4
 8000680:	20000098 	.word	0x20000098
 8000684:	2000008c 	.word	0x2000008c
 8000688:	200000a0 	.word	0x200000a0

        case AUTO_YELLOW_X:
        	HAL_GPIO_WritePin(GPIOA, LRY_Pin|LYX_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2188      	movs	r1, #136	@ 0x88
 8000690:	4827      	ldr	r0, [pc, #156]	@ (8000730 <fsm_automatic_run+0x310>)
 8000692:	f001 fba4 	bl	8001dde <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, LYY_Pin|LGY_Pin|LRX_Pin|LGX_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800069c:	4824      	ldr	r0, [pc, #144]	@ (8000730 <fsm_automatic_run+0x310>)
 800069e:	f001 fb9e 	bl	8001dde <HAL_GPIO_WritePin>
            updateRealTime(Red_Time_Y,Yellow_Time_X);
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <fsm_automatic_run+0x314>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a24      	ldr	r2, [pc, #144]	@ (8000738 <fsm_automatic_run+0x318>)
 80006a8:	6812      	ldr	r2, [r2, #0]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff77 	bl	80015a0 <updateRealTime>
            if (timer2_flag == 1) {
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <fsm_automatic_run+0x31c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d115      	bne.n	80006e6 <fsm_automatic_run+0x2c6>
                setTimer2(1000);
 80006ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006be:	f000 fc73 	bl	8000fa8 <setTimer2>
                updateRealTime(Red_Time_Y,Green_Time_X);
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <fsm_automatic_run+0x314>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <fsm_automatic_run+0x320>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ff67 	bl	80015a0 <updateRealTime>
                Yellow_Time_X--;
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <fsm_automatic_run+0x318>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <fsm_automatic_run+0x318>)
 80006da:	6013      	str	r3, [r2, #0]
                Red_Time_Y--;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <fsm_automatic_run+0x314>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <fsm_automatic_run+0x314>)
 80006e4:	6013      	str	r3, [r2, #0]
            }
            led7_run();
 80006e6:	f001 f83b 	bl	8001760 <led7_run>
            if (timer1_flag == 1) {
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <fsm_automatic_run+0x324>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d11a      	bne.n	8000728 <fsm_automatic_run+0x308>
            	setTimer1(LedGreenTime * 1000);
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <fsm_automatic_run+0x328>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc36 	bl	8000f70 <setTimer1>
                Green_Time_Y = LedGreenTime;
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <fsm_automatic_run+0x328>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a10      	ldr	r2, [pc, #64]	@ (800074c <fsm_automatic_run+0x32c>)
 800070a:	6013      	str	r3, [r2, #0]
                Red_Time_X = LedRedTime;
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <fsm_automatic_run+0x330>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <fsm_automatic_run+0x334>)
 8000712:	6013      	str	r3, [r2, #0]
                status = AUTO_GREEN_Y;
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <fsm_automatic_run+0x338>)
 8000716:	2202      	movs	r2, #2
 8000718:	601a      	str	r2, [r3, #0]
            }
            break;
 800071a:	e005      	b.n	8000728 <fsm_automatic_run+0x308>
            break;
 800071c:	bf00      	nop
 800071e:	e004      	b.n	800072a <fsm_automatic_run+0x30a>
            break;
 8000720:	bf00      	nop
 8000722:	e002      	b.n	800072a <fsm_automatic_run+0x30a>
            break;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <fsm_automatic_run+0x30a>
            break;
 8000728:	bf00      	nop
    }
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010800 	.word	0x40010800
 8000734:	2000008c 	.word	0x2000008c
 8000738:	200000a0 	.word	0x200000a0
 800073c:	20000430 	.word	0x20000430
 8000740:	20000098 	.word	0x20000098
 8000744:	20000428 	.word	0x20000428
 8000748:	20000044 	.word	0x20000044
 800074c:	20000094 	.word	0x20000094
 8000750:	2000003c 	.word	0x2000003c
 8000754:	20000090 	.word	0x20000090
 8000758:	200000b0 	.word	0x200000b0

0800075c <fsm_manual_run>:
 */
#include "fsm_manual.h"
int SetRedTime = 0;
int SetYellowTime = 0;
int SetGreenTime = 0;
void fsm_manual_run() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	switch (status) {
 8000760:	4b7f      	ldr	r3, [pc, #508]	@ (8000960 <fsm_manual_run+0x204>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b0e      	cmp	r3, #14
 8000766:	f000 8113 	beq.w	8000990 <fsm_manual_run+0x234>
 800076a:	2b0e      	cmp	r3, #14
 800076c:	f300 81ae 	bgt.w	8000acc <fsm_manual_run+0x370>
 8000770:	2b0c      	cmp	r3, #12
 8000772:	d002      	beq.n	800077a <fsm_manual_run+0x1e>
 8000774:	2b0d      	cmp	r3, #13
 8000776:	d079      	beq.n	800086c <fsm_manual_run+0x110>
			Green_Time_Y = LedGreenTime;
			Red_Time_X = LedRedTime;
		}
		break;
	default:
		break;
 8000778:	e1a8      	b.n	8000acc <fsm_manual_run+0x370>
		if (timer4_flag == 1) {
 800077a:	4b7a      	ldr	r3, [pc, #488]	@ (8000964 <fsm_manual_run+0x208>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d106      	bne.n	8000790 <fsm_manual_run+0x34>
			setTimer4(250);
 8000782:	20fa      	movs	r0, #250	@ 0xfa
 8000784:	f000 fc48 	bl	8001018 <setTimer4>
			HAL_GPIO_TogglePin(GPIOA, LRY_Pin|LRX_Pin);
 8000788:	2148      	movs	r1, #72	@ 0x48
 800078a:	4877      	ldr	r0, [pc, #476]	@ (8000968 <fsm_manual_run+0x20c>)
 800078c:	f001 fb3f 	bl	8001e0e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, LYY_Pin|LYX_Pin|LGY_Pin|LGX_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8000796:	4874      	ldr	r0, [pc, #464]	@ (8000968 <fsm_manual_run+0x20c>)
 8000798:	f001 fb21 	bl	8001dde <HAL_GPIO_WritePin>
		updateRealTime(SetRedTime,2);
 800079c:	4b73      	ldr	r3, [pc, #460]	@ (800096c <fsm_manual_run+0x210>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fefc 	bl	80015a0 <updateRealTime>
		if (timer1_flag == 1) {
 80007a8:	4b71      	ldr	r3, [pc, #452]	@ (8000970 <fsm_manual_run+0x214>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d106      	bne.n	80007be <fsm_manual_run+0x62>
			status = AUTO_GREEN_Y;
 80007b0:	4b6b      	ldr	r3, [pc, #428]	@ (8000960 <fsm_manual_run+0x204>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80007b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007ba:	f000 fbd9 	bl	8000f70 <setTimer1>
		if (isButton1Pressed() == 1) {
 80007be:	f7ff fced 	bl	800019c <isButton1Pressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d112      	bne.n	80007ee <fsm_manual_run+0x92>
			status = MAN_YELLOW;
 80007c8:	4b65      	ldr	r3, [pc, #404]	@ (8000960 <fsm_manual_run+0x204>)
 80007ca:	220d      	movs	r2, #13
 80007cc:	601a      	str	r2, [r3, #0]
			SetYellowTime = LedYellowTime;
 80007ce:	4b69      	ldr	r3, [pc, #420]	@ (8000974 <fsm_manual_run+0x218>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a69      	ldr	r2, [pc, #420]	@ (8000978 <fsm_manual_run+0x21c>)
 80007d4:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 80007d6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80007da:	f000 fbc9 	bl	8000f70 <setTimer1>
			setTimer4(250);
 80007de:	20fa      	movs	r0, #250	@ 0xfa
 80007e0:	f000 fc1a 	bl	8001018 <setTimer4>
			HAL_GPIO_WritePin(GPIOA, LYY_Pin|LYX_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2190      	movs	r1, #144	@ 0x90
 80007e8:	485f      	ldr	r0, [pc, #380]	@ (8000968 <fsm_manual_run+0x20c>)
 80007ea:	f001 faf8 	bl	8001dde <HAL_GPIO_WritePin>
		if (isButton2Pressed() == 1) {
 80007ee:	f7ff fce7 	bl	80001c0 <isButton2Pressed>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d10a      	bne.n	800080e <fsm_manual_run+0xb2>
			SetRedTime++;
 80007f8:	4b5c      	ldr	r3, [pc, #368]	@ (800096c <fsm_manual_run+0x210>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a5b      	ldr	r2, [pc, #364]	@ (800096c <fsm_manual_run+0x210>)
 8000800:	6013      	str	r3, [r2, #0]
			updateRealTime(SetRedTime,2);
 8000802:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <fsm_manual_run+0x210>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2102      	movs	r1, #2
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fec9 	bl	80015a0 <updateRealTime>
		led7_run();
 800080e:	f000 ffa7 	bl	8001760 <led7_run>
		if (isButton3Pressed() == 1) {
 8000812:	f7ff fce7 	bl	80001e4 <isButton3Pressed>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 8159 	bne.w	8000ad0 <fsm_manual_run+0x374>
			LedRedTime = SetRedTime;
 800081e:	4b53      	ldr	r3, [pc, #332]	@ (800096c <fsm_manual_run+0x210>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a56      	ldr	r2, [pc, #344]	@ (800097c <fsm_manual_run+0x220>)
 8000824:	6013      	str	r3, [r2, #0]
			LedGreenTime = LedRedTime - LedYellowTime;
 8000826:	4b55      	ldr	r3, [pc, #340]	@ (800097c <fsm_manual_run+0x220>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b52      	ldr	r3, [pc, #328]	@ (8000974 <fsm_manual_run+0x218>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <fsm_manual_run+0x224>)
 8000832:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_Y;
 8000834:	4b4a      	ldr	r3, [pc, #296]	@ (8000960 <fsm_manual_run+0x204>)
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
			setTimer1(LedGreenTime * 1000);
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <fsm_manual_run+0x224>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fb92 	bl	8000f70 <setTimer1>
			setTimer2(1000);
 800084c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000850:	f000 fbaa 	bl	8000fa8 <setTimer2>
			status = AUTO_GREEN_Y;
 8000854:	4b42      	ldr	r3, [pc, #264]	@ (8000960 <fsm_manual_run+0x204>)
 8000856:	2202      	movs	r2, #2
 8000858:	601a      	str	r2, [r3, #0]
			Green_Time_Y = LedGreenTime;
 800085a:	4b49      	ldr	r3, [pc, #292]	@ (8000980 <fsm_manual_run+0x224>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a49      	ldr	r2, [pc, #292]	@ (8000984 <fsm_manual_run+0x228>)
 8000860:	6013      	str	r3, [r2, #0]
			Red_Time_X = LedRedTime;
 8000862:	4b46      	ldr	r3, [pc, #280]	@ (800097c <fsm_manual_run+0x220>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a48      	ldr	r2, [pc, #288]	@ (8000988 <fsm_manual_run+0x22c>)
 8000868:	6013      	str	r3, [r2, #0]
		break;
 800086a:	e131      	b.n	8000ad0 <fsm_manual_run+0x374>
		if (timer4_flag == 1) {
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <fsm_manual_run+0x208>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d106      	bne.n	8000882 <fsm_manual_run+0x126>
			setTimer4(250);
 8000874:	20fa      	movs	r0, #250	@ 0xfa
 8000876:	f000 fbcf 	bl	8001018 <setTimer4>
			HAL_GPIO_TogglePin(GPIOA, LYY_Pin|LYX_Pin);
 800087a:	2190      	movs	r1, #144	@ 0x90
 800087c:	483a      	ldr	r0, [pc, #232]	@ (8000968 <fsm_manual_run+0x20c>)
 800087e:	f001 fac6 	bl	8001e0e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, LGY_Pin|LGX_Pin|LRY_Pin|LRX_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000888:	4837      	ldr	r0, [pc, #220]	@ (8000968 <fsm_manual_run+0x20c>)
 800088a:	f001 faa8 	bl	8001dde <HAL_GPIO_WritePin>
		updateRealTime(SetYellowTime,3);
 800088e:	4b3a      	ldr	r3, [pc, #232]	@ (8000978 <fsm_manual_run+0x21c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2103      	movs	r1, #3
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fe83 	bl	80015a0 <updateRealTime>
		if (timer1_flag == 1) {
 800089a:	4b35      	ldr	r3, [pc, #212]	@ (8000970 <fsm_manual_run+0x214>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d106      	bne.n	80008b0 <fsm_manual_run+0x154>
			status = AUTO_GREEN_Y;
 80008a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <fsm_manual_run+0x204>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80008a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008ac:	f000 fb60 	bl	8000f70 <setTimer1>
		if (isButton1Pressed() == 1) {
 80008b0:	f7ff fc74 	bl	800019c <isButton1Pressed>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d113      	bne.n	80008e2 <fsm_manual_run+0x186>
			status = MAN_GREEN;
 80008ba:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <fsm_manual_run+0x204>)
 80008bc:	220e      	movs	r2, #14
 80008be:	601a      	str	r2, [r3, #0]
			SetGreenTime = LedGreenTime;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <fsm_manual_run+0x224>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a31      	ldr	r2, [pc, #196]	@ (800098c <fsm_manual_run+0x230>)
 80008c6:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 80008c8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008cc:	f000 fb50 	bl	8000f70 <setTimer1>
			setTimer4(250);
 80008d0:	20fa      	movs	r0, #250	@ 0xfa
 80008d2:	f000 fba1 	bl	8001018 <setTimer4>
			HAL_GPIO_WritePin(GPIOA, LGY_Pin|LGX_Pin,GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80008dc:	4822      	ldr	r0, [pc, #136]	@ (8000968 <fsm_manual_run+0x20c>)
 80008de:	f001 fa7e 	bl	8001dde <HAL_GPIO_WritePin>
		if (isButton2Pressed() == 1) {
 80008e2:	f7ff fc6d 	bl	80001c0 <isButton2Pressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d10a      	bne.n	8000902 <fsm_manual_run+0x1a6>
			SetYellowTime++;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <fsm_manual_run+0x21c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <fsm_manual_run+0x21c>)
 80008f4:	6013      	str	r3, [r2, #0]
			updateRealTime(SetYellowTime,3);
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <fsm_manual_run+0x21c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2103      	movs	r1, #3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fe4f 	bl	80015a0 <updateRealTime>
		led7_run();
 8000902:	f000 ff2d 	bl	8001760 <led7_run>
		if (isButton3Pressed() == 1) {
 8000906:	f7ff fc6d 	bl	80001e4 <isButton3Pressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	f040 80e1 	bne.w	8000ad4 <fsm_manual_run+0x378>
			LedYellowTime = SetYellowTime;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <fsm_manual_run+0x21c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <fsm_manual_run+0x218>)
 8000918:	6013      	str	r3, [r2, #0]
			LedRedTime = LedGreenTime + LedYellowTime;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <fsm_manual_run+0x224>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <fsm_manual_run+0x218>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a15      	ldr	r2, [pc, #84]	@ (800097c <fsm_manual_run+0x220>)
 8000926:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_Y;
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <fsm_manual_run+0x204>)
 800092a:	2202      	movs	r2, #2
 800092c:	601a      	str	r2, [r3, #0]
			setTimer1(LedGreenTime * 1000);
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <fsm_manual_run+0x224>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fb18 	bl	8000f70 <setTimer1>
			setTimer2(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000944:	f000 fb30 	bl	8000fa8 <setTimer2>
			status = AUTO_GREEN_Y;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <fsm_manual_run+0x204>)
 800094a:	2202      	movs	r2, #2
 800094c:	601a      	str	r2, [r3, #0]
			Green_Time_Y = LedGreenTime;
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <fsm_manual_run+0x224>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0c      	ldr	r2, [pc, #48]	@ (8000984 <fsm_manual_run+0x228>)
 8000954:	6013      	str	r3, [r2, #0]
			Red_Time_X = LedRedTime;
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <fsm_manual_run+0x220>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <fsm_manual_run+0x22c>)
 800095c:	6013      	str	r3, [r2, #0]
		break;
 800095e:	e0b9      	b.n	8000ad4 <fsm_manual_run+0x378>
 8000960:	200000b0 	.word	0x200000b0
 8000964:	20000440 	.word	0x20000440
 8000968:	40010800 	.word	0x40010800
 800096c:	200000a4 	.word	0x200000a4
 8000970:	20000428 	.word	0x20000428
 8000974:	20000040 	.word	0x20000040
 8000978:	200000a8 	.word	0x200000a8
 800097c:	2000003c 	.word	0x2000003c
 8000980:	20000044 	.word	0x20000044
 8000984:	20000094 	.word	0x20000094
 8000988:	20000090 	.word	0x20000090
 800098c:	200000ac 	.word	0x200000ac
		if (timer4_flag == 1) {
 8000990:	4b53      	ldr	r3, [pc, #332]	@ (8000ae0 <fsm_manual_run+0x384>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d107      	bne.n	80009a8 <fsm_manual_run+0x24c>
			setTimer4(250);
 8000998:	20fa      	movs	r0, #250	@ 0xfa
 800099a:	f000 fb3d 	bl	8001018 <setTimer4>
			HAL_GPIO_TogglePin(GPIOA, LGY_Pin|LGX_Pin);
 800099e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80009a2:	4850      	ldr	r0, [pc, #320]	@ (8000ae4 <fsm_manual_run+0x388>)
 80009a4:	f001 fa33 	bl	8001e0e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, LRX_Pin|LRY_Pin|LYY_Pin|LYX_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	21d8      	movs	r1, #216	@ 0xd8
 80009ac:	484d      	ldr	r0, [pc, #308]	@ (8000ae4 <fsm_manual_run+0x388>)
 80009ae:	f001 fa16 	bl	8001dde <HAL_GPIO_WritePin>
		updateRealTime(SetGreenTime,4);
 80009b2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae8 <fsm_manual_run+0x38c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2104      	movs	r1, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fdf1 	bl	80015a0 <updateRealTime>
		if (timer1_flag == 1) {
 80009be:	4b4b      	ldr	r3, [pc, #300]	@ (8000aec <fsm_manual_run+0x390>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d106      	bne.n	80009d4 <fsm_manual_run+0x278>
			status = AUTO_GREEN_Y;
 80009c6:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <fsm_manual_run+0x394>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80009cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80009d0:	f000 face 	bl	8000f70 <setTimer1>
		if (isButton1Pressed() == 1) {
 80009d4:	f7ff fbe2 	bl	800019c <isButton1Pressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d117      	bne.n	8000a0e <fsm_manual_run+0x2b2>
			setTimer1(LedGreenTime * 1000);
 80009de:	4b45      	ldr	r3, [pc, #276]	@ (8000af4 <fsm_manual_run+0x398>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009e6:	fb02 f303 	mul.w	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fac0 	bl	8000f70 <setTimer1>
			setTimer2(1000);
 80009f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f4:	f000 fad8 	bl	8000fa8 <setTimer2>
			status = AUTO_GREEN_Y;
 80009f8:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <fsm_manual_run+0x394>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	601a      	str	r2, [r3, #0]
			Green_Time_Y = LedGreenTime;
 80009fe:	4b3d      	ldr	r3, [pc, #244]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a3d      	ldr	r2, [pc, #244]	@ (8000af8 <fsm_manual_run+0x39c>)
 8000a04:	6013      	str	r3, [r2, #0]
			Red_Time_X = LedRedTime;
 8000a06:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b00 <fsm_manual_run+0x3a4>)
 8000a0c:	6013      	str	r3, [r2, #0]
		if (isButton2Pressed() == 1) {
 8000a0e:	f7ff fbd7 	bl	80001c0 <isButton2Pressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10a      	bne.n	8000a2e <fsm_manual_run+0x2d2>
			SetGreenTime++;
 8000a18:	4b33      	ldr	r3, [pc, #204]	@ (8000ae8 <fsm_manual_run+0x38c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a32      	ldr	r2, [pc, #200]	@ (8000ae8 <fsm_manual_run+0x38c>)
 8000a20:	6013      	str	r3, [r2, #0]
			updateRealTime(SetGreenTime,4);
 8000a22:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <fsm_manual_run+0x38c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2104      	movs	r1, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fdb9 	bl	80015a0 <updateRealTime>
		led7_run();
 8000a2e:	f000 fe97 	bl	8001760 <led7_run>
		if (isButton3Pressed() == 1) {
 8000a32:	f7ff fbd7 	bl	80001e4 <isButton3Pressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d14d      	bne.n	8000ad8 <fsm_manual_run+0x37c>
			LedGreenTime = SetGreenTime;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <fsm_manual_run+0x38c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a2c      	ldr	r2, [pc, #176]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a42:	6013      	str	r3, [r2, #0]
			LedYellowTime = SetYellowTime;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <fsm_manual_run+0x3a8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <fsm_manual_run+0x3ac>)
 8000a4a:	6013      	str	r3, [r2, #0]
			LedRedTime = SetRedTime;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <fsm_manual_run+0x3b0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000a52:	6013      	str	r3, [r2, #0]
			if (LedRedTime > (LedYellowTime + LedGreenTime)) {
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <fsm_manual_run+0x3ac>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	441a      	add	r2, r3
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	da06      	bge.n	8000a74 <fsm_manual_run+0x318>
				LedGreenTime = LedRedTime - LedYellowTime;
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <fsm_manual_run+0x3ac>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	4a20      	ldr	r2, [pc, #128]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a72:	6013      	str	r3, [r2, #0]
			if (LedRedTime < (LedYellowTime + LedGreenTime)) {
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <fsm_manual_run+0x3ac>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dd06      	ble.n	8000a94 <fsm_manual_run+0x338>
				LedRedTime = LedGreenTime + LedYellowTime;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <fsm_manual_run+0x3ac>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000a92:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_Y;
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <fsm_manual_run+0x394>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
			setTimer1(LedGreenTime * 1000);
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <fsm_manual_run+0x398>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fa62 	bl	8000f70 <setTimer1>
			setTimer2(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab0:	f000 fa7a 	bl	8000fa8 <setTimer2>
			status = AUTO_GREEN_Y;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <fsm_manual_run+0x394>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	601a      	str	r2, [r3, #0]
			Green_Time_Y = LedGreenTime;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <fsm_manual_run+0x398>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <fsm_manual_run+0x39c>)
 8000ac0:	6013      	str	r3, [r2, #0]
			Red_Time_X = LedRedTime;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <fsm_manual_run+0x3a0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <fsm_manual_run+0x3a4>)
 8000ac8:	6013      	str	r3, [r2, #0]
		break;
 8000aca:	e005      	b.n	8000ad8 <fsm_manual_run+0x37c>
		break;
 8000acc:	bf00      	nop
 8000ace:	e004      	b.n	8000ada <fsm_manual_run+0x37e>
		break;
 8000ad0:	bf00      	nop
 8000ad2:	e002      	b.n	8000ada <fsm_manual_run+0x37e>
		break;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <fsm_manual_run+0x37e>
		break;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000440 	.word	0x20000440
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	200000ac 	.word	0x200000ac
 8000aec:	20000428 	.word	0x20000428
 8000af0:	200000b0 	.word	0x200000b0
 8000af4:	20000044 	.word	0x20000044
 8000af8:	20000094 	.word	0x20000094
 8000afc:	2000003c 	.word	0x2000003c
 8000b00:	20000090 	.word	0x20000090
 8000b04:	200000a8 	.word	0x200000a8
 8000b08:	20000040 	.word	0x20000040
 8000b0c:	200000a4 	.word	0x200000a4

08000b10 <main>:
  */
void led1test() {
	HAL_GPIO_TogglePin(GPIOA, Led_Red_Pin);
}
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f000 fe60 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f82a 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f000 f8b0 	bl	8000c80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b20:	f000 f862 	bl	8000be8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <main+0x4c>)
 8000b26:	f001 fdb9 	bl	800269c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000b2a:	f000 f91d 	bl	8000d68 <SCH_Init>
  SCH_Add_Task(timerRun, 1, 10);
 8000b2e:	220a      	movs	r2, #10
 8000b30:	2101      	movs	r1, #1
 8000b32:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <main+0x50>)
 8000b34:	f000 f924 	bl	8000d80 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 1, 10);
 8000b38:	220a      	movs	r2, #10
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <main+0x54>)
 8000b3e:	f000 f91f 	bl	8000d80 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 1, 10);
 8000b42:	220a      	movs	r2, #10
 8000b44:	2101      	movs	r1, #1
 8000b46:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <main+0x58>)
 8000b48:	f000 f91a 	bl	8000d80 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 1, 10);
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <main+0x5c>)
 8000b52:	f000 f915 	bl	8000d80 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000b56:	f000 f9c9 	bl	8000eec <SCH_Dispatch_Tasks>
 8000b5a:	e7fc      	b.n	8000b56 <main+0x46>
 8000b5c:	200000b8 	.word	0x200000b8
 8000b60:	08001051 	.word	0x08001051
 8000b64:	0800040d 	.word	0x0800040d
 8000b68:	08000421 	.word	0x08000421
 8000b6c:	0800075d 	.word	0x0800075d

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	@ 0x40
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	2228      	movs	r2, #40	@ 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f918 	bl	8002db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f94a 	bl	8001e40 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bb2:	f000 f8d3 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fbb8 	bl	8002344 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bda:	f000 f8bf 	bl	8000d5c <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	@ 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c0e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c1c:	2209      	movs	r2, #9
 8000c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2c:	4813      	ldr	r0, [pc, #76]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c2e:	f001 fce5 	bl	80025fc <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c38:	f000 f890 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c4a:	f001 fe63 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c54:	f000 f882 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_TIM2_Init+0x94>)
 8000c66:	f002 f83b 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f874 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000b8 	.word	0x200000b8

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a28      	ldr	r2, [pc, #160]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a22      	ldr	r2, [pc, #136]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LRY_Pin|LYY_Pin|LGY_Pin|LRX_Pin
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f244 11f8 	movw	r1, #16888	@ 0x41f8
 8000cca:	481d      	ldr	r0, [pc, #116]	@ (8000d40 <MX_GPIO_Init+0xc0>)
 8000ccc:	f001 f887 	bl	8001dde <HAL_GPIO_WritePin>
                          |LYX_Pin|LGX_Pin|Led_Red_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN0_Pin
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f24f 017f 	movw	r1, #61567	@ 0xf07f
 8000cd6:	481b      	ldr	r0, [pc, #108]	@ (8000d44 <MX_GPIO_Init+0xc4>)
 8000cd8:	f001 f881 	bl	8001dde <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LRY_Pin LYY_Pin LGY_Pin LRX_Pin
                           LYX_Pin LGX_Pin Led_Red_Pin */
  GPIO_InitStruct.Pin = LRY_Pin|LYY_Pin|LGY_Pin|LRX_Pin
 8000cdc:	f244 13f8 	movw	r3, #16888	@ 0x41f8
 8000ce0:	60bb      	str	r3, [r7, #8]
                          |LYX_Pin|LGX_Pin|Led_Red_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2302      	movs	r3, #2
 8000cec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4812      	ldr	r0, [pc, #72]	@ (8000d40 <MX_GPIO_Init+0xc0>)
 8000cf6:	f000 fedf 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN0_Pin
 8000cfa:	f24f 037f 	movw	r3, #61567	@ 0xf07f
 8000cfe:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <MX_GPIO_Init+0xc4>)
 8000d14:	f000 fed0 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8000d18:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_GPIO_Init+0xc0>)
 8000d2e:	f000 fec3 	bl	8001ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000d50:	f000 f86c 	bl	8000e2c <SCH_Update>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <Error_Handler+0x8>

08000d68 <SCH_Init>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <SCH_Init+0x14>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000420 	.word	0x20000420

08000d80 <SCH_Add_Task>:

void  SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 8000d8c:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b27      	cmp	r3, #39	@ 0x27
 8000d92:	d842      	bhi.n	8000e1a <SCH_Add_Task+0x9a>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <SCH_Add_Task+0xa8>)
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e28 <SCH_Add_Task+0xa8>)
 8000db2:	460b      	mov	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <SCH_Add_Task+0xa8>)
 8000dca:	460b      	mov	r3, r1
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <SCH_Add_Task+0xa8>)
 8000de2:	460b      	mov	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	330c      	adds	r3, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <SCH_Add_Task+0xa8>)
 8000e00:	460b      	mov	r3, r1
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	3310      	adds	r3, #16
 8000e0c:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <SCH_Add_Task+0xa4>)
 8000e18:	701a      	strb	r2, [r3, #0]
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000420 	.word	0x20000420
 8000e28:	20000100 	.word	0x20000100

08000e2c <SCH_Update>:

void SCH_Update(void) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
	for (int i = 0; i<current_index_task; i++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e048      	b.n	8000eca <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 8000e38:	492a      	ldr	r1, [pc, #168]	@ (8000ee4 <SCH_Update+0xb8>)
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d013      	beq.n	8000e76 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 8000e4e:	4925      	ldr	r1, [pc, #148]	@ (8000ee4 <SCH_Update+0xb8>)
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1e59      	subs	r1, r3, #1
 8000e62:	4820      	ldr	r0, [pc, #128]	@ (8000ee4 <SCH_Update+0xb8>)
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4403      	add	r3, r0
 8000e70:	3304      	adds	r3, #4
 8000e72:	6019      	str	r1, [r3, #0]
 8000e74:	e026      	b.n	8000ec4 <SCH_Update+0x98>
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000e76:	491b      	ldr	r1, [pc, #108]	@ (8000ee4 <SCH_Update+0xb8>)
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3308      	adds	r3, #8
 8000e86:	6819      	ldr	r1, [r3, #0]
 8000e88:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <SCH_Update+0xb8>)
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4403      	add	r3, r0
 8000e96:	3304      	adds	r3, #4
 8000e98:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000e9a:	4912      	ldr	r1, [pc, #72]	@ (8000ee4 <SCH_Update+0xb8>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	330c      	adds	r3, #12
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2d8      	uxtb	r0, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <SCH_Update+0xb8>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	330c      	adds	r3, #12
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<current_index_task; i++) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <SCH_Update+0xbc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	dbb0      	blt.n	8000e38 <SCH_Update+0xc>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000100 	.word	0x20000100
 8000ee8:	20000420 	.word	0x20000420

08000eec <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e02b      	b.n	8000f50 <SCH_Dispatch_Tasks+0x64>
		if (SCH_tasks_G[i].RunMe > 0) {
 8000ef8:	491b      	ldr	r1, [pc, #108]	@ (8000f68 <SCH_Dispatch_Tasks+0x7c>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	330c      	adds	r3, #12
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d01d      	beq.n	8000f4a <SCH_Dispatch_Tasks+0x5e>
				SCH_tasks_G[i].RunMe --;
 8000f0e:	4916      	ldr	r1, [pc, #88]	@ (8000f68 <SCH_Dispatch_Tasks+0x7c>)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b2d8      	uxtb	r0, r3
 8000f24:	4910      	ldr	r1, [pc, #64]	@ (8000f68 <SCH_Dispatch_Tasks+0x7c>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	330c      	adds	r3, #12
 8000f34:	4602      	mov	r2, r0
 8000f36:	701a      	strb	r2, [r3, #0]
				(*SCH_tasks_G[i].pTask)();
 8000f38:	490b      	ldr	r1, [pc, #44]	@ (8000f68 <SCH_Dispatch_Tasks+0x7c>)
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4798      	blx	r3
	for(int i = 0; i < current_index_task; i++) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SCH_Dispatch_Tasks+0x80>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	dbcd      	blt.n	8000ef8 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000100 	.word	0x20000100
 8000f6c:	20000420 	.word	0x20000420

08000f70 <setTimer1>:
int timer4_counter = 0;
int timer4_flag = 0;
int timer5_counter = 0;
int timer5_flag = 0;

void setTimer1(int duration) {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    timer1_counter = duration/TICK;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <setTimer1+0x2c>)
 8000f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f80:	1092      	asrs	r2, r2, #2
 8000f82:	17db      	asrs	r3, r3, #31
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <setTimer1+0x30>)
 8000f88:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <setTimer1+0x34>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	66666667 	.word	0x66666667
 8000fa0:	20000424 	.word	0x20000424
 8000fa4:	20000428 	.word	0x20000428

08000fa8 <setTimer2>:

void setTimer2(int duration) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    timer2_counter = duration/TICK;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <setTimer2+0x2c>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1092      	asrs	r2, r2, #2
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a06      	ldr	r2, [pc, #24]	@ (8000fd8 <setTimer2+0x30>)
 8000fc0:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <setTimer2+0x34>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	66666667 	.word	0x66666667
 8000fd8:	2000042c 	.word	0x2000042c
 8000fdc:	20000430 	.word	0x20000430

08000fe0 <setTimer3>:

void setTimer3(int duration) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    timer3_counter = duration/TICK;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <setTimer3+0x2c>)
 8000fec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff0:	1092      	asrs	r2, r2, #2
 8000ff2:	17db      	asrs	r3, r3, #31
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <setTimer3+0x30>)
 8000ff8:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <setTimer3+0x34>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	66666667 	.word	0x66666667
 8001010:	20000434 	.word	0x20000434
 8001014:	20000438 	.word	0x20000438

08001018 <setTimer4>:

void setTimer4(int duration) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    timer4_counter = duration/TICK;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <setTimer4+0x2c>)
 8001024:	fb82 1203 	smull	r1, r2, r2, r3
 8001028:	1092      	asrs	r2, r2, #2
 800102a:	17db      	asrs	r3, r3, #31
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <setTimer4+0x30>)
 8001030:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <setTimer4+0x34>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	66666667 	.word	0x66666667
 8001048:	2000043c 	.word	0x2000043c
 800104c:	20000440 	.word	0x20000440

08001050 <timerRun>:
void setTimer5(int duration) {
    timer5_counter = duration/TICK;
    timer5_flag = 0;
}

void timerRun() {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    if (timer1_counter > 0) {
 8001054:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <timerRun+0xac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	dd0b      	ble.n	8001074 <timerRun+0x24>
        timer1_counter--;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <timerRun+0xac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3b01      	subs	r3, #1
 8001062:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <timerRun+0xac>)
 8001064:	6013      	str	r3, [r2, #0]
        if (timer1_counter <= 0) {
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <timerRun+0xac>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	dc02      	bgt.n	8001074 <timerRun+0x24>
            timer1_flag = 1;
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <timerRun+0xb0>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer2_counter > 0) {
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <timerRun+0xb4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dd0b      	ble.n	8001094 <timerRun+0x44>
        timer2_counter--;
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <timerRun+0xb4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <timerRun+0xb4>)
 8001084:	6013      	str	r3, [r2, #0]
        if (timer2_counter <= 0) {
 8001086:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <timerRun+0xb4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	dc02      	bgt.n	8001094 <timerRun+0x44>
            timer2_flag = 1;
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <timerRun+0xb8>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer3_counter > 0) {
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <timerRun+0xbc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd0b      	ble.n	80010b4 <timerRun+0x64>
        timer3_counter--;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <timerRun+0xbc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <timerRun+0xbc>)
 80010a4:	6013      	str	r3, [r2, #0]
        if (timer3_counter <= 0) {
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <timerRun+0xbc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dc02      	bgt.n	80010b4 <timerRun+0x64>
            timer3_flag = 1;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <timerRun+0xc0>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer4_counter > 0) {
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <timerRun+0xc4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd0b      	ble.n	80010d4 <timerRun+0x84>
        timer4_counter--;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <timerRun+0xc4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <timerRun+0xc4>)
 80010c4:	6013      	str	r3, [r2, #0]
        if (timer4_counter <= 0) {
 80010c6:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <timerRun+0xc4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dc02      	bgt.n	80010d4 <timerRun+0x84>
            timer4_flag = 1;
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <timerRun+0xc8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer5_counter > 0) {
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <timerRun+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dd0b      	ble.n	80010f4 <timerRun+0xa4>
        timer5_counter--;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <timerRun+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <timerRun+0xcc>)
 80010e4:	6013      	str	r3, [r2, #0]
        if (timer5_counter <= 0) {
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <timerRun+0xcc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc02      	bgt.n	80010f4 <timerRun+0xa4>
            timer5_flag = 1;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <timerRun+0xd0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
        }
    }
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000424 	.word	0x20000424
 8001100:	20000428 	.word	0x20000428
 8001104:	2000042c 	.word	0x2000042c
 8001108:	20000430 	.word	0x20000430
 800110c:	20000434 	.word	0x20000434
 8001110:	20000438 	.word	0x20000438
 8001114:	2000043c 	.word	0x2000043c
 8001118:	20000440 	.word	0x20000440
 800111c:	20000444 	.word	0x20000444
 8001120:	20000448 	.word	0x20000448

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <HAL_MspInit+0x5c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <HAL_MspInit+0x5c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_MspInit+0x60>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_MspInit+0x60>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001198:	d113      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_TIM_Base_MspInit+0x44>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <HAL_TIM_Base_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_TIM_Base_MspInit+0x44>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 fc47 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011bc:	201c      	movs	r0, #28
 80011be:	f000 fc60 	bl	8001a82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 fb20 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <TIM2_IRQHandler+0x10>)
 800122e:	f001 fa81 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000b8 	.word	0x200000b8

0800123c <display7SEG>:
 *  Created on: Oct 27, 2024
 *      Author: Lie
 */
#include "support_void.h"
int led_buffer[4] = {1,2,3,4};
void display7SEG(int num){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
switch (num) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b09      	cmp	r3, #9
 8001248:	f200 8180 	bhi.w	800154c <display7SEG+0x310>
 800124c:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <display7SEG+0x18>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	0800127d 	.word	0x0800127d
 8001258:	080012c5 	.word	0x080012c5
 800125c:	0800130d 	.word	0x0800130d
 8001260:	08001355 	.word	0x08001355
 8001264:	0800139d 	.word	0x0800139d
 8001268:	080013e5 	.word	0x080013e5
 800126c:	0800142d 	.word	0x0800142d
 8001270:	08001475 	.word	0x08001475
 8001274:	080014bd 	.word	0x080014bd
 8001278:	08001505 	.word	0x08001505
	case 0:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2101      	movs	r1, #1
 8001280:	48c6      	ldr	r0, [pc, #792]	@ (800159c <display7SEG+0x360>)
 8001282:	f000 fdac 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2102      	movs	r1, #2
 800128a:	48c4      	ldr	r0, [pc, #784]	@ (800159c <display7SEG+0x360>)
 800128c:	f000 fda7 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2104      	movs	r1, #4
 8001294:	48c1      	ldr	r0, [pc, #772]	@ (800159c <display7SEG+0x360>)
 8001296:	f000 fda2 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2108      	movs	r1, #8
 800129e:	48bf      	ldr	r0, [pc, #764]	@ (800159c <display7SEG+0x360>)
 80012a0:	f000 fd9d 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2110      	movs	r1, #16
 80012a8:	48bc      	ldr	r0, [pc, #752]	@ (800159c <display7SEG+0x360>)
 80012aa:	f000 fd98 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	48ba      	ldr	r0, [pc, #744]	@ (800159c <display7SEG+0x360>)
 80012b4:	f000 fd93 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2140      	movs	r1, #64	@ 0x40
 80012bc:	48b7      	ldr	r0, [pc, #732]	@ (800159c <display7SEG+0x360>)
 80012be:	f000 fd8e 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 80012c2:	e167      	b.n	8001594 <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2101      	movs	r1, #1
 80012c8:	48b4      	ldr	r0, [pc, #720]	@ (800159c <display7SEG+0x360>)
 80012ca:	f000 fd88 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	48b2      	ldr	r0, [pc, #712]	@ (800159c <display7SEG+0x360>)
 80012d4:	f000 fd83 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2104      	movs	r1, #4
 80012dc:	48af      	ldr	r0, [pc, #700]	@ (800159c <display7SEG+0x360>)
 80012de:	f000 fd7e 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2108      	movs	r1, #8
 80012e6:	48ad      	ldr	r0, [pc, #692]	@ (800159c <display7SEG+0x360>)
 80012e8:	f000 fd79 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2110      	movs	r1, #16
 80012f0:	48aa      	ldr	r0, [pc, #680]	@ (800159c <display7SEG+0x360>)
 80012f2:	f000 fd74 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2120      	movs	r1, #32
 80012fa:	48a8      	ldr	r0, [pc, #672]	@ (800159c <display7SEG+0x360>)
 80012fc:	f000 fd6f 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	@ 0x40
 8001304:	48a5      	ldr	r0, [pc, #660]	@ (800159c <display7SEG+0x360>)
 8001306:	f000 fd6a 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 800130a:	e143      	b.n	8001594 <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	48a2      	ldr	r0, [pc, #648]	@ (800159c <display7SEG+0x360>)
 8001312:	f000 fd64 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	48a0      	ldr	r0, [pc, #640]	@ (800159c <display7SEG+0x360>)
 800131c:	f000 fd5f 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2104      	movs	r1, #4
 8001324:	489d      	ldr	r0, [pc, #628]	@ (800159c <display7SEG+0x360>)
 8001326:	f000 fd5a 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2108      	movs	r1, #8
 800132e:	489b      	ldr	r0, [pc, #620]	@ (800159c <display7SEG+0x360>)
 8001330:	f000 fd55 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2110      	movs	r1, #16
 8001338:	4898      	ldr	r0, [pc, #608]	@ (800159c <display7SEG+0x360>)
 800133a:	f000 fd50 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2120      	movs	r1, #32
 8001342:	4896      	ldr	r0, [pc, #600]	@ (800159c <display7SEG+0x360>)
 8001344:	f000 fd4b 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2140      	movs	r1, #64	@ 0x40
 800134c:	4893      	ldr	r0, [pc, #588]	@ (800159c <display7SEG+0x360>)
 800134e:	f000 fd46 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 8001352:	e11f      	b.n	8001594 <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2101      	movs	r1, #1
 8001358:	4890      	ldr	r0, [pc, #576]	@ (800159c <display7SEG+0x360>)
 800135a:	f000 fd40 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2102      	movs	r1, #2
 8001362:	488e      	ldr	r0, [pc, #568]	@ (800159c <display7SEG+0x360>)
 8001364:	f000 fd3b 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2104      	movs	r1, #4
 800136c:	488b      	ldr	r0, [pc, #556]	@ (800159c <display7SEG+0x360>)
 800136e:	f000 fd36 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	4889      	ldr	r0, [pc, #548]	@ (800159c <display7SEG+0x360>)
 8001378:	f000 fd31 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2110      	movs	r1, #16
 8001380:	4886      	ldr	r0, [pc, #536]	@ (800159c <display7SEG+0x360>)
 8001382:	f000 fd2c 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2120      	movs	r1, #32
 800138a:	4884      	ldr	r0, [pc, #528]	@ (800159c <display7SEG+0x360>)
 800138c:	f000 fd27 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2140      	movs	r1, #64	@ 0x40
 8001394:	4881      	ldr	r0, [pc, #516]	@ (800159c <display7SEG+0x360>)
 8001396:	f000 fd22 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 800139a:	e0fb      	b.n	8001594 <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	487e      	ldr	r0, [pc, #504]	@ (800159c <display7SEG+0x360>)
 80013a2:	f000 fd1c 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2102      	movs	r1, #2
 80013aa:	487c      	ldr	r0, [pc, #496]	@ (800159c <display7SEG+0x360>)
 80013ac:	f000 fd17 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2104      	movs	r1, #4
 80013b4:	4879      	ldr	r0, [pc, #484]	@ (800159c <display7SEG+0x360>)
 80013b6:	f000 fd12 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2108      	movs	r1, #8
 80013be:	4877      	ldr	r0, [pc, #476]	@ (800159c <display7SEG+0x360>)
 80013c0:	f000 fd0d 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2110      	movs	r1, #16
 80013c8:	4874      	ldr	r0, [pc, #464]	@ (800159c <display7SEG+0x360>)
 80013ca:	f000 fd08 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	4872      	ldr	r0, [pc, #456]	@ (800159c <display7SEG+0x360>)
 80013d4:	f000 fd03 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2140      	movs	r1, #64	@ 0x40
 80013dc:	486f      	ldr	r0, [pc, #444]	@ (800159c <display7SEG+0x360>)
 80013de:	f000 fcfe 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 80013e2:	e0d7      	b.n	8001594 <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	486c      	ldr	r0, [pc, #432]	@ (800159c <display7SEG+0x360>)
 80013ea:	f000 fcf8 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	486a      	ldr	r0, [pc, #424]	@ (800159c <display7SEG+0x360>)
 80013f4:	f000 fcf3 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2104      	movs	r1, #4
 80013fc:	4867      	ldr	r0, [pc, #412]	@ (800159c <display7SEG+0x360>)
 80013fe:	f000 fcee 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2108      	movs	r1, #8
 8001406:	4865      	ldr	r0, [pc, #404]	@ (800159c <display7SEG+0x360>)
 8001408:	f000 fce9 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2110      	movs	r1, #16
 8001410:	4862      	ldr	r0, [pc, #392]	@ (800159c <display7SEG+0x360>)
 8001412:	f000 fce4 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2120      	movs	r1, #32
 800141a:	4860      	ldr	r0, [pc, #384]	@ (800159c <display7SEG+0x360>)
 800141c:	f000 fcdf 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2140      	movs	r1, #64	@ 0x40
 8001424:	485d      	ldr	r0, [pc, #372]	@ (800159c <display7SEG+0x360>)
 8001426:	f000 fcda 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 800142a:	e0b3      	b.n	8001594 <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	485a      	ldr	r0, [pc, #360]	@ (800159c <display7SEG+0x360>)
 8001432:	f000 fcd4 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2102      	movs	r1, #2
 800143a:	4858      	ldr	r0, [pc, #352]	@ (800159c <display7SEG+0x360>)
 800143c:	f000 fccf 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2104      	movs	r1, #4
 8001444:	4855      	ldr	r0, [pc, #340]	@ (800159c <display7SEG+0x360>)
 8001446:	f000 fcca 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2108      	movs	r1, #8
 800144e:	4853      	ldr	r0, [pc, #332]	@ (800159c <display7SEG+0x360>)
 8001450:	f000 fcc5 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2110      	movs	r1, #16
 8001458:	4850      	ldr	r0, [pc, #320]	@ (800159c <display7SEG+0x360>)
 800145a:	f000 fcc0 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	484e      	ldr	r0, [pc, #312]	@ (800159c <display7SEG+0x360>)
 8001464:	f000 fcbb 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2140      	movs	r1, #64	@ 0x40
 800146c:	484b      	ldr	r0, [pc, #300]	@ (800159c <display7SEG+0x360>)
 800146e:	f000 fcb6 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 8001472:	e08f      	b.n	8001594 <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2101      	movs	r1, #1
 8001478:	4848      	ldr	r0, [pc, #288]	@ (800159c <display7SEG+0x360>)
 800147a:	f000 fcb0 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2102      	movs	r1, #2
 8001482:	4846      	ldr	r0, [pc, #280]	@ (800159c <display7SEG+0x360>)
 8001484:	f000 fcab 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2104      	movs	r1, #4
 800148c:	4843      	ldr	r0, [pc, #268]	@ (800159c <display7SEG+0x360>)
 800148e:	f000 fca6 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2108      	movs	r1, #8
 8001496:	4841      	ldr	r0, [pc, #260]	@ (800159c <display7SEG+0x360>)
 8001498:	f000 fca1 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2110      	movs	r1, #16
 80014a0:	483e      	ldr	r0, [pc, #248]	@ (800159c <display7SEG+0x360>)
 80014a2:	f000 fc9c 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2120      	movs	r1, #32
 80014aa:	483c      	ldr	r0, [pc, #240]	@ (800159c <display7SEG+0x360>)
 80014ac:	f000 fc97 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2140      	movs	r1, #64	@ 0x40
 80014b4:	4839      	ldr	r0, [pc, #228]	@ (800159c <display7SEG+0x360>)
 80014b6:	f000 fc92 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 80014ba:	e06b      	b.n	8001594 <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	4836      	ldr	r0, [pc, #216]	@ (800159c <display7SEG+0x360>)
 80014c2:	f000 fc8c 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2102      	movs	r1, #2
 80014ca:	4834      	ldr	r0, [pc, #208]	@ (800159c <display7SEG+0x360>)
 80014cc:	f000 fc87 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	4831      	ldr	r0, [pc, #196]	@ (800159c <display7SEG+0x360>)
 80014d6:	f000 fc82 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2108      	movs	r1, #8
 80014de:	482f      	ldr	r0, [pc, #188]	@ (800159c <display7SEG+0x360>)
 80014e0:	f000 fc7d 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2110      	movs	r1, #16
 80014e8:	482c      	ldr	r0, [pc, #176]	@ (800159c <display7SEG+0x360>)
 80014ea:	f000 fc78 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	482a      	ldr	r0, [pc, #168]	@ (800159c <display7SEG+0x360>)
 80014f4:	f000 fc73 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	4827      	ldr	r0, [pc, #156]	@ (800159c <display7SEG+0x360>)
 80014fe:	f000 fc6e 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 8001502:	e047      	b.n	8001594 <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2101      	movs	r1, #1
 8001508:	4824      	ldr	r0, [pc, #144]	@ (800159c <display7SEG+0x360>)
 800150a:	f000 fc68 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2102      	movs	r1, #2
 8001512:	4822      	ldr	r0, [pc, #136]	@ (800159c <display7SEG+0x360>)
 8001514:	f000 fc63 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2104      	movs	r1, #4
 800151c:	481f      	ldr	r0, [pc, #124]	@ (800159c <display7SEG+0x360>)
 800151e:	f000 fc5e 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2108      	movs	r1, #8
 8001526:	481d      	ldr	r0, [pc, #116]	@ (800159c <display7SEG+0x360>)
 8001528:	f000 fc59 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2110      	movs	r1, #16
 8001530:	481a      	ldr	r0, [pc, #104]	@ (800159c <display7SEG+0x360>)
 8001532:	f000 fc54 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	4818      	ldr	r0, [pc, #96]	@ (800159c <display7SEG+0x360>)
 800153c:	f000 fc4f 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2140      	movs	r1, #64	@ 0x40
 8001544:	4815      	ldr	r0, [pc, #84]	@ (800159c <display7SEG+0x360>)
 8001546:	f000 fc4a 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 800154a:	e023      	b.n	8001594 <display7SEG+0x358>
	default:
		HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2101      	movs	r1, #1
 8001550:	4812      	ldr	r0, [pc, #72]	@ (800159c <display7SEG+0x360>)
 8001552:	f000 fc44 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2102      	movs	r1, #2
 800155a:	4810      	ldr	r0, [pc, #64]	@ (800159c <display7SEG+0x360>)
 800155c:	f000 fc3f 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2104      	movs	r1, #4
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <display7SEG+0x360>)
 8001566:	f000 fc3a 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2108      	movs	r1, #8
 800156e:	480b      	ldr	r0, [pc, #44]	@ (800159c <display7SEG+0x360>)
 8001570:	f000 fc35 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2110      	movs	r1, #16
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <display7SEG+0x360>)
 800157a:	f000 fc30 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2120      	movs	r1, #32
 8001582:	4806      	ldr	r0, [pc, #24]	@ (800159c <display7SEG+0x360>)
 8001584:	f000 fc2b 	bl	8001dde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2140      	movs	r1, #64	@ 0x40
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <display7SEG+0x360>)
 800158e:	f000 fc26 	bl	8001dde <HAL_GPIO_WritePin>
		break;
 8001592:	bf00      	nop
	}
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40010c00 	.word	0x40010c00

080015a0 <updateRealTime>:
void updateRealTime(int num1,int num2) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a18      	ldr	r2, [pc, #96]	@ (8001610 <updateRealTime+0x70>)
 80015ae:	fb82 1203 	smull	r1, r2, r2, r3
 80015b2:	1092      	asrs	r2, r2, #2
 80015b4:	17db      	asrs	r3, r3, #31
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a16      	ldr	r2, [pc, #88]	@ (8001614 <updateRealTime+0x74>)
 80015ba:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <updateRealTime+0x70>)
 80015c0:	fb83 2301 	smull	r2, r3, r3, r1
 80015c4:	109a      	asrs	r2, r3, #2
 80015c6:	17cb      	asrs	r3, r1, #31
 80015c8:	1ad2      	subs	r2, r2, r3
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	1aca      	subs	r2, r1, r3
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <updateRealTime+0x74>)
 80015d6:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <updateRealTime+0x70>)
 80015dc:	fb82 1203 	smull	r1, r2, r2, r3
 80015e0:	1092      	asrs	r2, r2, #2
 80015e2:	17db      	asrs	r3, r3, #31
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <updateRealTime+0x74>)
 80015e8:	6093      	str	r3, [r2, #8]
    led_buffer[3] = num2 % 10;
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <updateRealTime+0x70>)
 80015ee:	fb83 2301 	smull	r2, r3, r3, r1
 80015f2:	109a      	asrs	r2, r3, #2
 80015f4:	17cb      	asrs	r3, r1, #31
 80015f6:	1ad2      	subs	r2, r2, r3
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	1aca      	subs	r2, r1, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <updateRealTime+0x74>)
 8001604:	60da      	str	r2, [r3, #12]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	66666667 	.word	0x66666667
 8001614:	20000048 	.word	0x20000048

08001618 <led_display>:
void led_display() {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
        switch(scanLEDState) {
 800161c:	4b4d      	ldr	r3, [pc, #308]	@ (8001754 <led_display+0x13c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	2b03      	cmp	r3, #3
 8001624:	f200 8090 	bhi.w	8001748 <led_display+0x130>
 8001628:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <led_display+0x18>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001641 	.word	0x08001641
 8001634:	08001683 	.word	0x08001683
 8001638:	080016c5 	.word	0x080016c5
 800163c:	08001707 	.word	0x08001707
            case 1:
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001646:	4844      	ldr	r0, [pc, #272]	@ (8001758 <led_display+0x140>)
 8001648:	f000 fbc9 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001652:	4841      	ldr	r0, [pc, #260]	@ (8001758 <led_display+0x140>)
 8001654:	f000 fbc3 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800165e:	483e      	ldr	r0, [pc, #248]	@ (8001758 <led_display+0x140>)
 8001660:	f000 fbbd 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166a:	483b      	ldr	r0, [pc, #236]	@ (8001758 <led_display+0x140>)
 800166c:	f000 fbb7 	bl	8001dde <HAL_GPIO_WritePin>
                display7SEG(led_buffer[0]);
 8001670:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <led_display+0x144>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fde1 	bl	800123c <display7SEG>
                scanLEDState = 2;
 800167a:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <led_display+0x13c>)
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
                break;
 8001680:	e066      	b.n	8001750 <led_display+0x138>
            case 2:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001688:	4833      	ldr	r0, [pc, #204]	@ (8001758 <led_display+0x140>)
 800168a:	f000 fba8 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001694:	4830      	ldr	r0, [pc, #192]	@ (8001758 <led_display+0x140>)
 8001696:	f000 fba2 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a0:	482d      	ldr	r0, [pc, #180]	@ (8001758 <led_display+0x140>)
 80016a2:	f000 fb9c 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ac:	482a      	ldr	r0, [pc, #168]	@ (8001758 <led_display+0x140>)
 80016ae:	f000 fb96 	bl	8001dde <HAL_GPIO_WritePin>
                display7SEG(led_buffer[1]);
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <led_display+0x144>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fdc0 	bl	800123c <display7SEG>
                scanLEDState = 3;
 80016bc:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <led_display+0x13c>)
 80016be:	2203      	movs	r2, #3
 80016c0:	601a      	str	r2, [r3, #0]
                break;
 80016c2:	e045      	b.n	8001750 <led_display+0x138>
            case 3:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ca:	4823      	ldr	r0, [pc, #140]	@ (8001758 <led_display+0x140>)
 80016cc:	f000 fb87 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d6:	4820      	ldr	r0, [pc, #128]	@ (8001758 <led_display+0x140>)
 80016d8:	f000 fb81 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e2:	481d      	ldr	r0, [pc, #116]	@ (8001758 <led_display+0x140>)
 80016e4:	f000 fb7b 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	481a      	ldr	r0, [pc, #104]	@ (8001758 <led_display+0x140>)
 80016f0:	f000 fb75 	bl	8001dde <HAL_GPIO_WritePin>
                display7SEG(led_buffer[2]);
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <led_display+0x144>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd9f 	bl	800123c <display7SEG>
                scanLEDState = 4;
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <led_display+0x13c>)
 8001700:	2204      	movs	r2, #4
 8001702:	601a      	str	r2, [r3, #0]
                break;
 8001704:	e024      	b.n	8001750 <led_display+0x138>
            case 4:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <led_display+0x140>)
 800170e:	f000 fb66 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001718:	480f      	ldr	r0, [pc, #60]	@ (8001758 <led_display+0x140>)
 800171a:	f000 fb60 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <led_display+0x140>)
 8001726:	f000 fb5a 	bl	8001dde <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001730:	4809      	ldr	r0, [pc, #36]	@ (8001758 <led_display+0x140>)
 8001732:	f000 fb54 	bl	8001dde <HAL_GPIO_WritePin>
                display7SEG(led_buffer[3]);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <led_display+0x144>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd7e 	bl	800123c <display7SEG>
                scanLEDState = 1;
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <led_display+0x13c>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
                break;
 8001746:	e003      	b.n	8001750 <led_display+0x138>
            default:
            	scanLEDState = 1;
 8001748:	4b02      	ldr	r3, [pc, #8]	@ (8001754 <led_display+0x13c>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
      }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000b4 	.word	0x200000b4
 8001758:	40010c00 	.word	0x40010c00
 800175c:	20000048 	.word	0x20000048

08001760 <led7_run>:
void led7_run(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	if (timer3_flag == 1) {
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <led7_run+0x1c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d104      	bne.n	8001776 <led7_run+0x16>
		setTimer3(125);
 800176c:	207d      	movs	r0, #125	@ 0x7d
 800176e:	f7ff fc37 	bl	8000fe0 <setTimer3>
		led_display();
 8001772:	f7ff ff51 	bl	8001618 <led_display>
	}
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000438 	.word	0x20000438

08001780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff fff8 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001792:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001794:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a8:	4c09      	ldr	r4, [pc, #36]	@ (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f001 fb05 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff f9a9 	bl	8000b10 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017c8:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 80017cc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017d0:	20000450 	.word	0x20000450

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f923 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fc96 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f93b 	bl	8001a9e <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f903 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000058 	.word	0x20000058
 800185c:	20000060 	.word	0x20000060
 8001860:	2000005c 	.word	0x2000005c

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000060 	.word	0x20000060
 8001884:	2000044c 	.word	0x2000044c

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	@ (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	2000044c 	.word	0x2000044c

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	@ (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	@ (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	@ (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff2d 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff42 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff35 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b08b      	sub	sp, #44	@ 0x2c
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aca:	e161      	b.n	8001d90 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001acc:	2201      	movs	r2, #1
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8150 	bne.w	8001d8a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a97      	ldr	r2, [pc, #604]	@ (8001d4c <HAL_GPIO_Init+0x294>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d05e      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001af4:	4a95      	ldr	r2, [pc, #596]	@ (8001d4c <HAL_GPIO_Init+0x294>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d875      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001afa:	4a95      	ldr	r2, [pc, #596]	@ (8001d50 <HAL_GPIO_Init+0x298>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d058      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b00:	4a93      	ldr	r2, [pc, #588]	@ (8001d50 <HAL_GPIO_Init+0x298>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d86f      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b06:	4a93      	ldr	r2, [pc, #588]	@ (8001d54 <HAL_GPIO_Init+0x29c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d052      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b0c:	4a91      	ldr	r2, [pc, #580]	@ (8001d54 <HAL_GPIO_Init+0x29c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d869      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b12:	4a91      	ldr	r2, [pc, #580]	@ (8001d58 <HAL_GPIO_Init+0x2a0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04c      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b18:	4a8f      	ldr	r2, [pc, #572]	@ (8001d58 <HAL_GPIO_Init+0x2a0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d863      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b1e:	4a8f      	ldr	r2, [pc, #572]	@ (8001d5c <HAL_GPIO_Init+0x2a4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d046      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a8d      	ldr	r2, [pc, #564]	@ (8001d5c <HAL_GPIO_Init+0x2a4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d85d      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d82a      	bhi.n	8001b84 <HAL_GPIO_Init+0xcc>
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d859      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b32:	a201      	add	r2, pc, #4	@ (adr r2, 8001b38 <HAL_GPIO_Init+0x80>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001bb3 	.word	0x08001bb3
 8001b3c:	08001b8d 	.word	0x08001b8d
 8001b40:	08001b9f 	.word	0x08001b9f
 8001b44:	08001be1 	.word	0x08001be1
 8001b48:	08001be7 	.word	0x08001be7
 8001b4c:	08001be7 	.word	0x08001be7
 8001b50:	08001be7 	.word	0x08001be7
 8001b54:	08001be7 	.word	0x08001be7
 8001b58:	08001be7 	.word	0x08001be7
 8001b5c:	08001be7 	.word	0x08001be7
 8001b60:	08001be7 	.word	0x08001be7
 8001b64:	08001be7 	.word	0x08001be7
 8001b68:	08001be7 	.word	0x08001be7
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001be7 	.word	0x08001be7
 8001b74:	08001be7 	.word	0x08001be7
 8001b78:	08001be7 	.word	0x08001be7
 8001b7c:	08001b95 	.word	0x08001b95
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	4a76      	ldr	r2, [pc, #472]	@ (8001d60 <HAL_GPIO_Init+0x2a8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b8a:	e02c      	b.n	8001be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e029      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	623b      	str	r3, [r7, #32]
          break;
 8001b9c:	e024      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e01f      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	330c      	adds	r3, #12
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e01a      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e013      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	611a      	str	r2, [r3, #16]
          break;
 8001bd2:	e009      	b.n	8001be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	615a      	str	r2, [r3, #20]
          break;
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          break;
 8001be6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2bff      	cmp	r3, #255	@ 0xff
 8001bec:	d801      	bhi.n	8001bf2 <HAL_GPIO_Init+0x13a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_Init+0x13e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2bff      	cmp	r3, #255	@ 0xff
 8001bfc:	d802      	bhi.n	8001c04 <HAL_GPIO_Init+0x14c>
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x152>
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	3b08      	subs	r3, #8
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	210f      	movs	r1, #15
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	6a39      	ldr	r1, [r7, #32]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80a9 	beq.w	8001d8a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c38:	4b4a      	ldr	r3, [pc, #296]	@ (8001d64 <HAL_GPIO_Init+0x2ac>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <HAL_GPIO_Init+0x2ac>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_GPIO_Init+0x2ac>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c50:	4a45      	ldr	r2, [pc, #276]	@ (8001d68 <HAL_GPIO_Init+0x2b0>)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	@ (8001d6c <HAL_GPIO_Init+0x2b4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1e0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d70 <HAL_GPIO_Init+0x2b8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1dc>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3b      	ldr	r2, [pc, #236]	@ (8001d74 <HAL_GPIO_Init+0x2bc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1d8>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x1e2>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x1e2>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x1e2>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001caa:	492f      	ldr	r1, [pc, #188]	@ (8001d68 <HAL_GPIO_Init+0x2b0>)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	492b      	ldr	r1, [pc, #172]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cd2:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4927      	ldr	r1, [pc, #156]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4921      	ldr	r1, [pc, #132]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	491d      	ldr	r1, [pc, #116]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d14:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4917      	ldr	r1, [pc, #92]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4913      	ldr	r1, [pc, #76]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01f      	beq.n	8001d7c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	490d      	ldr	r1, [pc, #52]	@ (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e01f      	b.n	8001d8a <HAL_GPIO_Init+0x2d2>
 8001d4a:	bf00      	nop
 8001d4c:	10320000 	.word	0x10320000
 8001d50:	10310000 	.word	0x10310000
 8001d54:	10220000 	.word	0x10220000
 8001d58:	10210000 	.word	0x10210000
 8001d5c:	10120000 	.word	0x10120000
 8001d60:	10110000 	.word	0x10110000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_GPIO_Init+0x2f4>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	4909      	ldr	r1, [pc, #36]	@ (8001dac <HAL_GPIO_Init+0x2f4>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f47f ae96 	bne.w	8001acc <HAL_GPIO_Init+0x14>
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	372c      	adds	r7, #44	@ 0x2c
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]
 8001dea:	4613      	mov	r3, r2
 8001dec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dee:	787b      	ldrb	r3, [r7, #1]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dfa:	e003      	b.n	8001e04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	041a      	lsls	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	611a      	str	r2, [r3, #16]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e20:	887a      	ldrh	r2, [r7, #2]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	041a      	lsls	r2, r3, #16
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	400b      	ands	r3, r1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e272      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8087 	beq.w	8001f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d00c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d112      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5e>
 8001e78:	4b8c      	ldr	r3, [pc, #560]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e84:	d10b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e86:	4b89      	ldr	r3, [pc, #548]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d06c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x12c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d168      	bne.n	8001f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e24c      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x76>
 8001ea8:	4b80      	ldr	r3, [pc, #512]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a7f      	ldr	r2, [pc, #508]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e02e      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7a      	ldr	r2, [pc, #488]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b78      	ldr	r3, [pc, #480]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a77      	ldr	r2, [pc, #476]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0xbc>
 8001ee2:	4b72      	ldr	r3, [pc, #456]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a71      	ldr	r2, [pc, #452]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001efc:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6a      	ldr	r2, [pc, #424]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b68      	ldr	r3, [pc, #416]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a67      	ldr	r2, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fcb4 	bl	8001888 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fcb0 	bl	8001888 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e200      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b5d      	ldr	r3, [pc, #372]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe4>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fca0 	bl	8001888 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fc9c 	bl	8001888 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1ec      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b53      	ldr	r3, [pc, #332]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x10c>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f86:	4b49      	ldr	r3, [pc, #292]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x18c>
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x176>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1c0      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4939      	ldr	r1, [pc, #228]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fc55 	bl	8001888 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff fc51 	bl	8001888 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1a1      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4927      	ldr	r1, [pc, #156]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fc34 	bl	8001888 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff fc30 	bl	8001888 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e180      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03a      	beq.n	80020c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d019      	beq.n	800208a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <HAL_RCC_OscConfig+0x274>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205c:	f7ff fc14 	bl	8001888 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff fc10 	bl	8001888 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e160      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f000 fa9c 	bl	80025c0 <RCC_Delay>
 8002088:	e01c      	b.n	80020c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_RCC_OscConfig+0x274>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fbfa 	bl	8001888 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002096:	e00f      	b.n	80020b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff fbf6 	bl	8001888 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d908      	bls.n	80020b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e146      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	42420000 	.word	0x42420000
 80020b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	4b92      	ldr	r3, [pc, #584]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e9      	bne.n	8002098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a6 	beq.w	800221e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a87      	ldr	r2, [pc, #540]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]
 80020ee:	4b85      	ldr	r3, [pc, #532]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b82      	ldr	r3, [pc, #520]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b7f      	ldr	r3, [pc, #508]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7e      	ldr	r2, [pc, #504]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff fbb7 	bl	8001888 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff fbb3 	bl	8001888 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	@ 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e103      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b75      	ldr	r3, [pc, #468]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x312>
 8002144:	4b6f      	ldr	r3, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a6e      	ldr	r2, [pc, #440]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e02d      	b.n	80021ae <HAL_RCC_OscConfig+0x36e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x334>
 800215a:	4b6a      	ldr	r3, [pc, #424]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a69      	ldr	r2, [pc, #420]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	4b67      	ldr	r3, [pc, #412]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a66      	ldr	r2, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	e01c      	b.n	80021ae <HAL_RCC_OscConfig+0x36e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x356>
 800217c:	4b61      	ldr	r3, [pc, #388]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a60      	ldr	r2, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	4b5e      	ldr	r3, [pc, #376]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a5d      	ldr	r2, [pc, #372]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	e00b      	b.n	80021ae <HAL_RCC_OscConfig+0x36e>
 8002196:	4b5b      	ldr	r3, [pc, #364]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	4b58      	ldr	r3, [pc, #352]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a57      	ldr	r2, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d015      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fb67 	bl	8001888 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff fb63 	bl	8001888 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0b1      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ee      	beq.n	80021be <HAL_RCC_OscConfig+0x37e>
 80021e0:	e014      	b.n	800220c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fb51 	bl	8001888 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fb4d 	bl	8001888 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e09b      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ee      	bne.n	80021ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b3c      	ldr	r3, [pc, #240]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8087 	beq.w	8002336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d061      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d146      	bne.n	80022ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b33      	ldr	r3, [pc, #204]	@ (800230c <HAL_RCC_OscConfig+0x4cc>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fb21 	bl	8001888 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff fb1d 	bl	8001888 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e06d      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002272:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4921      	ldr	r1, [pc, #132]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a19      	ldr	r1, [r3, #32]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	430b      	orrs	r3, r1
 8002296:	491b      	ldr	r1, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x4cc>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7ff faf1 	bl	8001888 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff faed 	bl	8001888 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e03d      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x46a>
 80022c8:	e035      	b.n	8002336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fada 	bl	8001888 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff fad6 	bl	8001888 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e026      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x498>
 80022f6:	e01e      	b.n	8002336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e019      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_OscConfig+0x500>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	429a      	cmp	r2, r3
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0d0      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d910      	bls.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b67      	ldr	r3, [pc, #412]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4965      	ldr	r1, [pc, #404]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d040      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e073      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06b      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4936      	ldr	r1, [pc, #216]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff fa28 	bl	8001888 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff fa24 	bl	8001888 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e053      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d210      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4922      	ldr	r1, [pc, #136]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f821 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	@ (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1cc>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <HAL_RCC_ClockConfig+0x1d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f986 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
 800250c:	08002e24 	.word	0x08002e24
 8002510:	20000058 	.word	0x20000058
 8002514:	2000005c 	.word	0x2000005c

08002518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x30>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x36>
 8002546:	e027      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	613b      	str	r3, [r7, #16]
      break;
 800254c:	e027      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	fb03 f202 	mul.w	r2, r3, r2
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e004      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0c      	ldr	r2, [pc, #48]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	613b      	str	r3, [r7, #16]
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	693b      	ldr	r3, [r7, #16]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08002e34 	.word	0x08002e34
 80025b8:	08002e44 	.word	0x08002e44
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <RCC_Delay+0x34>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <RCC_Delay+0x38>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0a5b      	lsrs	r3, r3, #9
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025dc:	bf00      	nop
  }
  while (Delay --);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	60fa      	str	r2, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f9      	bne.n	80025dc <RCC_Delay+0x1c>
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000058 	.word	0x20000058
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fdb0 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fa56 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e035      	b.n	8002720 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a16      	ldr	r2, [pc, #88]	@ (800272c <HAL_TIM_Base_Start_IT+0x90>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x4e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026de:	d004      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x4e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <HAL_TIM_Base_Start_IT+0x94>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d010      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	e007      	b.n	800271e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0202 	mvn.w	r2, #2
 8002768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f998 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f98b 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f99a 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f972 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f965 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f974 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f94c 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f93f 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f94e 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f926 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f919 	bl	8002aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f928 	bl	8002ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fa54 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa6f 	bl	8002da2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8f8 	bl	8002ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0220 	mvn.w	r2, #32
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa42 	bl	8002d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b4      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800294e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002968:	d03e      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xd4>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296e:	f200 8087 	bhi.w	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002976:	f000 8086 	beq.w	8002a86 <HAL_TIM_ConfigClockSource+0x172>
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297e:	d87f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b70      	cmp	r3, #112	@ 0x70
 8002982:	d01a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xa6>
 8002984:	2b70      	cmp	r3, #112	@ 0x70
 8002986:	d87b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b60      	cmp	r3, #96	@ 0x60
 800298a:	d050      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x11a>
 800298c:	2b60      	cmp	r3, #96	@ 0x60
 800298e:	d877      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b50      	cmp	r3, #80	@ 0x50
 8002992:	d03c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xfa>
 8002994:	2b50      	cmp	r3, #80	@ 0x50
 8002996:	d873      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x13a>
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d86f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b30      	cmp	r3, #48	@ 0x30
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b30      	cmp	r3, #48	@ 0x30
 80029a6:	d86b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d060      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d867      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d05a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	e062      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ca:	f000 f96a 	bl	8002ca2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	609a      	str	r2, [r3, #8]
      break;
 80029e6:	e04f      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	f000 f953 	bl	8002ca2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e03c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 f8ca 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2150      	movs	r1, #80	@ 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f921 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e02c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f8e8 	bl	8002c10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2160      	movs	r1, #96	@ 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f911 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e01c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 f8aa 	bl	8002bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f901 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e00c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 f8f8 	bl	8002c6e <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e003      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e000      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
	...

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2b      	ldr	r2, [pc, #172]	@ (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x28>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x28>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <TIM_Base_SetConfig+0xc4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a20      	ldr	r2, [pc, #128]	@ (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x52>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x52>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <TIM_Base_SetConfig+0xc4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <TIM_Base_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d103      	bne.n	8002b84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f023 0201 	bic.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f023 030a 	bic.w	r3, r3, #10
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0210 	bic.w	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	031b      	lsls	r3, r3, #12
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	621a      	str	r2, [r3, #32]
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f043 0307 	orr.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b087      	sub	sp, #28
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e041      	b.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d44:	d004      	beq.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10c      	bne.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400

08002d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <memset>:
 8002db4:	4603      	mov	r3, r0
 8002db6:	4402      	add	r2, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	4d0c      	ldr	r5, [pc, #48]	@ (8002dfc <__libc_init_array+0x38>)
 8002dca:	4c0d      	ldr	r4, [pc, #52]	@ (8002e00 <__libc_init_array+0x3c>)
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	f000 f81a 	bl	8002e0c <_init>
 8002dd8:	2600      	movs	r6, #0
 8002dda:	4d0a      	ldr	r5, [pc, #40]	@ (8002e04 <__libc_init_array+0x40>)
 8002ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8002e08 <__libc_init_array+0x44>)
 8002dde:	1b64      	subs	r4, r4, r5
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08002e48 	.word	0x08002e48
 8002e00:	08002e48 	.word	0x08002e48
 8002e04:	08002e48 	.word	0x08002e48
 8002e08:	08002e4c 	.word	0x08002e4c

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
